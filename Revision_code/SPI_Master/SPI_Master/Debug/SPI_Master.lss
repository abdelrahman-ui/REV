
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000038a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011f2  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087c  00000000  00000000  00001712  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000725  00000000  00000000  00001f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000066d  00000000  00000000  000027fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000937  00000000  00000000  00002e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000037a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8e 01 	call	0x31c	; 0x31c <main>
  7a:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_WriteChannel>:
		case Dio_Port_C:
				*data=GET_BIT(PINC_REG,channelPos);
		break;
		
		case Dio_Port_D:
				*data=GET_BIT(PIND_REG,channelPos);
  82:	98 2f       	mov	r25, r24
  84:	97 70       	andi	r25, 0x07	; 7
  86:	86 95       	lsr	r24
  88:	86 95       	lsr	r24
  8a:	86 95       	lsr	r24
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <Dio_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <Dio_WriteChannel+0x1c>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <Dio_WriteChannel+0x90>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <Dio_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <Dio_WriteChannel+0xca>
  9c:	08 95       	ret
  9e:	61 11       	cpse	r22, r1
  a0:	0e c0       	rjmp	.+28     	; 0xbe <Dio_WriteChannel+0x3c>
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <Dio_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	9a 95       	dec	r25
  b2:	e2 f7       	brpl	.-8      	; 0xac <Dio_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	80 95       	com	r24
  b8:	84 23       	and	r24, r20
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	08 95       	ret
  be:	4b b3       	in	r20, 0x1b	; 27
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	b9 01       	movw	r22, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <Dio_WriteChannel+0x4a>
  c8:	66 0f       	add	r22, r22
  ca:	77 1f       	adc	r23, r23
  cc:	9a 95       	dec	r25
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <Dio_WriteChannel+0x46>
  d0:	cb 01       	movw	r24, r22
  d2:	84 2b       	or	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
  d8:	61 11       	cpse	r22, r1
  da:	0e c0       	rjmp	.+28     	; 0xf8 <Dio_WriteChannel+0x76>
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	08 95       	ret
  f8:	48 b3       	in	r20, 0x18	; 24
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <Dio_WriteChannel+0x84>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	9a 95       	dec	r25
 108:	e2 f7       	brpl	.-8      	; 0x102 <Dio_WriteChannel+0x80>
 10a:	cb 01       	movw	r24, r22
 10c:	84 2b       	or	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
 112:	61 11       	cpse	r22, r1
 114:	0e c0       	rjmp	.+28     	; 0x132 <Dio_WriteChannel+0xb0>
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Dio_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	9a 95       	dec	r25
 126:	e2 f7       	brpl	.-8      	; 0x120 <Dio_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	80 95       	com	r24
 12c:	84 23       	and	r24, r20
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret
 132:	45 b3       	in	r20, 0x15	; 21
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	b9 01       	movw	r22, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Dio_WriteChannel+0xbe>
 13c:	66 0f       	add	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	9a 95       	dec	r25
 142:	e2 f7       	brpl	.-8      	; 0x13c <Dio_WriteChannel+0xba>
 144:	cb 01       	movw	r24, r22
 146:	84 2b       	or	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
 14c:	61 11       	cpse	r22, r1
 14e:	0e c0       	rjmp	.+28     	; 0x16c <Dio_WriteChannel+0xea>
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <Dio_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	9a 95       	dec	r25
 160:	e2 f7       	brpl	.-8      	; 0x15a <Dio_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	80 95       	com	r24
 166:	84 23       	and	r24, r20
 168:	82 bb       	out	0x12, r24	; 18
 16a:	08 95       	ret
 16c:	42 b3       	in	r20, 0x12	; 18
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	b9 01       	movw	r22, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <Dio_WriteChannel+0xf8>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	9a 95       	dec	r25
 17c:	e2 f7       	brpl	.-8      	; 0x176 <Dio_WriteChannel+0xf4>
 17e:	cb 01       	movw	r24, r22
 180:	84 2b       	or	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_Write_Port>:
	}
		
}	
void DIO_Write_Port(Dio_PortType Portx,uint8 data )
{
	switch (Portx)
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	41 f0       	breq	.+16     	; 0x19a <DIO_Write_Port+0x14>
 18a:	28 f0       	brcs	.+10     	; 0x196 <DIO_Write_Port+0x10>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	39 f0       	breq	.+14     	; 0x19e <DIO_Write_Port+0x18>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	39 f0       	breq	.+14     	; 0x1a2 <DIO_Write_Port+0x1c>
 194:	08 95       	ret
	{
		case Dio_Port_A :
			PORTA_REG=data;
 196:	6b bb       	out	0x1b, r22	; 27
		break;
 198:	08 95       	ret
		case Dio_Port_B :
			PORTB_REG=data;
 19a:	68 bb       	out	0x18, r22	; 24
		break;
 19c:	08 95       	ret
		case Dio_Port_C :
			PORTC_REG=data;
 19e:	65 bb       	out	0x15, r22	; 21
		break;
 1a0:	08 95       	ret
		case Dio_Port_D :
			PORTD_REG=data;
 1a2:	62 bb       	out	0x12, r22	; 18
 1a4:	08 95       	ret

000001a6 <LCD_Command>:
*/
void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
 1aa:	6b b3       	in	r22, 0x1b	; 27
 1ac:	6f 70       	andi	r22, 0x0F	; 15
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	68 2b       	or	r22, r24
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_Write_Port>
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	89 e1       	ldi	r24, 0x19	; 25
 1bc:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	8b e1       	ldi	r24, 0x1B	; 27
 1c4:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 1c8:	25 e3       	ldi	r18, 0x35	; 53
 1ca:	2a 95       	dec	r18
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_Command+0x24>
 1ce:	00 00       	nop
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	8b e1       	ldi	r24, 0x1B	; 27
 1d4:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	9f e1       	ldi	r25, 0x1F	; 31
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_Command+0x36>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Command+0x3c>
 1e2:	00 00       	nop
 1e4:	6b b3       	in	r22, 0x1b	; 27
 1e6:	6f 70       	andi	r22, 0x0F	; 15
 1e8:	20 e1       	ldi	r18, 0x10	; 16
 1ea:	c2 9f       	mul	r28, r18
 1ec:	c0 01       	movw	r24, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	68 2b       	or	r22, r24
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_Write_Port>
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	8b e1       	ldi	r24, 0x1B	; 27
 1fc:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 200:	85 e0       	ldi	r24, 0x05	; 5
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_Command+0x5c>
 206:	00 00       	nop
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	8b e1       	ldi	r24, 0x1B	; 27
 20c:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 210:	8f e3       	ldi	r24, 0x3F	; 63
 212:	9f e1       	ldi	r25, 0x1F	; 31
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <LCD_Command+0x6e>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCD_Command+0x74>
 21a:	00 00       	nop
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <LCD_Init>:
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	8a e1       	ldi	r24, 0x1A	; 26
 224:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	89 ef       	ldi	r24, 0xF9	; 249
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <LCD_Init+0xe>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_Init+0x18>
 238:	00 00       	nop
 23a:	83 e3       	ldi	r24, 0x33	; 51
 23c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Command>
 240:	82 e3       	ldi	r24, 0x32	; 50
 242:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Command>
 246:	88 e2       	ldi	r24, 0x28	; 40
 248:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Command>
 24c:	8c e0       	ldi	r24, 0x0C	; 12
 24e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Command>
 252:	86 e0       	ldi	r24, 0x06	; 6
 254:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Command>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Command>
 25e:	08 95       	ret

00000260 <LCD_Char>:
}

void LCD_Char( unsigned char data )
{
 260:	cf 93       	push	r28
 262:	c8 2f       	mov	r28, r24
	//LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);/* Sending upper nibble */
	DIO_Write_Port(Dio_Port_A,((LCD_Data_Port & 0x0F) | (data & 0xF0)));
 264:	6b b3       	in	r22, 0x1b	; 27
 266:	6f 70       	andi	r22, 0x0F	; 15
 268:	80 7f       	andi	r24, 0xF0	; 240
 26a:	68 2b       	or	r22, r24
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_Write_Port>
	Dio_WriteChannel(LCD_RS,STD_high);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	89 e1       	ldi	r24, 0x19	; 25
 276:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	Dio_WriteChannel(LCD_EN,STD_high);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	8b e1       	ldi	r24, 0x1B	; 27
 27e:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	25 e0       	ldi	r18, 0x05	; 5
 284:	2a 95       	dec	r18
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_Char+0x24>
 288:	00 00       	nop
	_delay_us(1);
	Dio_WriteChannel(LCD_EN,STD_low);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	8b e1       	ldi	r24, 0x1B	; 27
 28e:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 292:	8f e3       	ldi	r24, 0x3F	; 63
 294:	9f e1       	ldi	r25, 0x1F	; 31
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Char+0x36>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_Char+0x3c>
 29c:	00 00       	nop
	_delay_us(2000);
	DIO_Write_Port(Dio_Port_A,((LCD_Data_Port & 0x0F) | (data << 4)));  /* Sending lower nibble */
 29e:	6b b3       	in	r22, 0x1b	; 27
 2a0:	6f 70       	andi	r22, 0x0F	; 15
 2a2:	20 e1       	ldi	r18, 0x10	; 16
 2a4:	c2 9f       	mul	r28, r18
 2a6:	c0 01       	movw	r24, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	68 2b       	or	r22, r24
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_Write_Port>
	Dio_WriteChannel(LCD_EN,STD_high);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	8b e1       	ldi	r24, 0x1B	; 27
 2b6:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 2ba:	85 e0       	ldi	r24, 0x05	; 5
 2bc:	8a 95       	dec	r24
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_Char+0x5c>
 2c0:	00 00       	nop
	_delay_us(1);
	Dio_WriteChannel(LCD_EN,STD_low);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	8b e1       	ldi	r24, 0x1B	; 27
 2c6:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	29 ef       	ldi	r18, 0xF9	; 249
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	91 50       	subi	r25, 0x01	; 1
 2d2:	20 40       	sbci	r18, 0x00	; 0
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <LCD_Char+0x70>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Char+0x7a>
 2da:	00 00       	nop
	_delay_ms(20);
}
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <LCD_String>:

/*

*/
void LCD_String(char *str)		/* Send string to LCD function */
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 2e6:	88 81       	ld	r24, Y
 2e8:	88 23       	and	r24, r24
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <LCD_String+0x18>
 2ec:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
 2ee:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Char>

*/
void LCD_String(char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 2f2:	89 91       	ld	r24, Y+
 2f4:	81 11       	cpse	r24, r1
 2f6:	fb cf       	rjmp	.-10     	; 0x2ee <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <SPI_Init>:
		}
    }
}
void SPI_Init(){
	//data direction for SPI bus Pins
	DDRB|=(1<<MOSI)|(1<<SCK);
 2fe:	87 b3       	in	r24, 0x17	; 23
 300:	80 6a       	ori	r24, 0xA0	; 160
 302:	87 bb       	out	0x17, r24	; 23
	DDRC|=(1<<CS)|(1<<LED0);
 304:	84 b3       	in	r24, 0x14	; 20
 306:	85 60       	ori	r24, 0x05	; 5
 308:	84 bb       	out	0x14, r24	; 20
	//MODE0-CPOL=0 CPHA=0 , SPE=1 , MSTR=1 DORD=MSB(0) , SPEED=FOSC/16=1Mhz
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPR0);
 30a:	8d b1       	in	r24, 0x0d	; 13
 30c:	81 65       	ori	r24, 0x51	; 81
 30e:	8d b9       	out	0x0d, r24	; 13
 310:	08 95       	ret

00000312 <SPI_Transfer>:
	
}

unsigned char SPI_Transfer(unsigned char sendByte){
	//
	SPDR=sendByte;
 312:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
 314:	77 9b       	sbis	0x0e, 7	; 14
 316:	fe cf       	rjmp	.-4      	; 0x314 <SPI_Transfer+0x2>
	return SPDR;
 318:	8f b1       	in	r24, 0x0f	; 15
}
 31a:	08 95       	ret

0000031c <main>:

void SPI_Init();
unsigned char SPI_Transfer(unsigned char sendByte);
int main(void)
{
    SPI_Init();
 31c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <SPI_Init>
	LCD_Init();
 320:	0e 94 10 01 	call	0x220	; 0x220 <LCD_Init>
	LCD_Char('M');
 324:	8d e4       	ldi	r24, 0x4D	; 77
 326:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Char>
		SS_DISABLE();
		_delay_ms(1000);
		if (recvByte==0x55)
		{
		
			PORTC^=(1<<LED0);
 32a:	c4 e0       	ldi	r28, 0x04	; 4
    SPI_Init();
	LCD_Init();
	LCD_Char('M');
    while (1) 
    {
		LCD_Command (0x01);		/* Clear display */
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Command>
 332:	8f e3       	ldi	r24, 0x3F	; 63
 334:	9f e1       	ldi	r25, 0x1F	; 31
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <main+0x1a>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x20>
 33c:	00 00       	nop
		_delay_ms(2);
		LCD_Command (0x80);		/* Cursor at home position */
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_Command>
		LCD_String("HI");
 344:	80 e6       	ldi	r24, 0x60	; 96
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_String>
		SS_ENABLE();
 34c:	a8 98       	cbi	0x15, 0	; 21
		unsigned char recvByte=SPI_Transfer(0xAA);
 34e:	8a ea       	ldi	r24, 0xAA	; 170
 350:	0e 94 89 01 	call	0x312	; 0x312 <SPI_Transfer>
		SS_DISABLE();
 354:	a8 9a       	sbi	0x15, 0	; 21
 356:	9f ef       	ldi	r25, 0xFF	; 255
 358:	23 ed       	ldi	r18, 0xD3	; 211
 35a:	30 e3       	ldi	r19, 0x30	; 48
 35c:	91 50       	subi	r25, 0x01	; 1
 35e:	20 40       	sbci	r18, 0x00	; 0
 360:	30 40       	sbci	r19, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x40>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x4a>
 366:	00 00       	nop
		_delay_ms(1000);
		if (recvByte==0x55)
 368:	85 35       	cpi	r24, 0x55	; 85
 36a:	01 f7       	brne	.-64     	; 0x32c <main+0x10>
		{
		
			PORTC^=(1<<LED0);
 36c:	85 b3       	in	r24, 0x15	; 21
 36e:	8c 27       	eor	r24, r28
 370:	85 bb       	out	0x15, r24	; 21
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	93 ed       	ldi	r25, 0xD3	; 211
 376:	20 e3       	ldi	r18, 0x30	; 48
 378:	81 50       	subi	r24, 0x01	; 1
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <main+0x5c>
 380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x66>
 382:	00 00       	nop
 384:	d3 cf       	rjmp	.-90     	; 0x32c <main+0x10>

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
