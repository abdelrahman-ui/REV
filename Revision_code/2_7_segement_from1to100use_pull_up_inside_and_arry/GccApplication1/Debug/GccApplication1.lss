
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000e2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b0  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052d  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000208  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e0  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000044  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
unsigned char Lut[]={0b0111111,0b0000110,0b1011011,0b1001111,0b1100110,0b1101101,0b1111101,0b0000111,0b1111111,0b11111011};//m4 3aref 2zobot m3 el keet
	
int main(void)
{
	char i=0;
	DDRA=0xff;// 7leha out 
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
	PORTA=Lut[0];//23red f el 2wel 0
  86:	e0 e6       	ldi	r30, 0x60	; 96
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	90 81       	ld	r25, Z
  8c:	9b bb       	out	0x1b, r25	; 27
	DDRB=0xff;// 7leha out
  8e:	87 bb       	out	0x17, r24	; 23
	PORTB=Lut[0];//23red f el 2wel 0
  90:	80 81       	ld	r24, Z
  92:	88 bb       	out	0x18, r24	; 24
    // f3al el input resrstanse 2w pull up inside
	DDRC=0x00;
  94:	14 ba       	out	0x14, r1	; 20
	PORTC=0x01;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	85 bb       	out	0x15, r24	; 21

unsigned char Lut[]={0b0111111,0b0000110,0b1011011,0b1001111,0b1100110,0b1101101,0b1111101,0b0000111,0b1111111,0b11111011};//m4 3aref 2zobot m3 el keet
	
int main(void)
{
	char i=0;
  9a:	90 e0       	ldi	r25, 0x00	; 0
	PORTC=0x01;
    while (1) 
    {  i++;
		if((PORTC&0x01)==0x01)
		i=0;
		PORTA=Lut[i%10];//23red el a7aaaad
  9c:	3d ec       	ldi	r19, 0xCD	; 205
    // f3al el input resrstanse 2w pull up inside
	DDRC=0x00;
	PORTC=0x01;
    while (1) 
    {  i++;
		if((PORTC&0x01)==0x01)
  9e:	a8 99       	sbic	0x15, 0	; 21
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x24>
	PORTB=Lut[0];//23red f el 2wel 0
    // f3al el input resrstanse 2w pull up inside
	DDRC=0x00;
	PORTC=0x01;
    while (1) 
    {  i++;
  a2:	9f 5f       	subi	r25, 0xFF	; 255
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <main+0x26>
		if((PORTC&0x01)==0x01)
		i=0;
  a6:	90 e0       	ldi	r25, 0x00	; 0
		PORTA=Lut[i%10];//23red el a7aaaad
  a8:	93 9f       	mul	r25, r19
  aa:	e1 2d       	mov	r30, r1
  ac:	11 24       	eor	r1, r1
  ae:	e6 95       	lsr	r30
  b0:	e6 95       	lsr	r30
  b2:	e6 95       	lsr	r30
  b4:	2e 2f       	mov	r18, r30
  b6:	22 0f       	add	r18, r18
  b8:	82 2f       	mov	r24, r18
  ba:	88 0f       	add	r24, r24
  bc:	88 0f       	add	r24, r24
  be:	82 0f       	add	r24, r18
  c0:	a9 2f       	mov	r26, r25
  c2:	a8 1b       	sub	r26, r24
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	a0 5a       	subi	r26, 0xA0	; 160
  c8:	bf 4f       	sbci	r27, 0xFF	; 255
  ca:	8c 91       	ld	r24, X
  cc:	8b bb       	out	0x1b, r24	; 27
		PORTB=Lut[i/10];//23red el 34raaaat
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	e0 5a       	subi	r30, 0xA0	; 160
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	80 81       	ld	r24, Z
  d6:	88 bb       	out	0x18, r24	; 24
		while((PINC&0x01)==0x00)
  d8:	98 9b       	sbis	0x13, 0	; 19
  da:	fe cf       	rjmp	.-4      	; 0xd8 <main+0x56>
  dc:	e0 cf       	rjmp	.-64     	; 0x9e <main+0x1c>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
