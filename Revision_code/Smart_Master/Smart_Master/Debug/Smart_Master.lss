
Smart_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000218  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000988  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a0  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000405  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001784  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000345  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  8a:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Uart_Init>:
}

void Uart_Init ()
{
	// Initialize Boud Rate
	UBRRL=BAUD_EQ;
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	89 b9       	out	0x09, r24	; 9
	// Transimate & Resive & Enable interrupt of reciver complete
	UCSRB |=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	88 69       	ori	r24, 0x98	; 152
  9a:	8a b9       	out	0x0a, r24	; 10
	//Number Of Stop bits & size from [5.....9] & No parity & Asynchronous
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  9c:	80 b5       	in	r24, 0x20	; 32
  9e:	86 68       	ori	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <Uart_Send_Char>:


void Uart_Send_Char( unsigned char data)
{
	//Send data
	while(!(UCSRA&(1<<UDRE)));//polling
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <Uart_Send_Char>
	UDR=data;
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <Uart_Receive>:
}


char Uart_Receive()
{
	while(!(UCSRA&(1<<RXC)));   //make sure i have data now
  ac:	5f 9b       	sbis	0x0b, 7	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <Uart_Receive>
	return UDR;
  b0:	8c b1       	in	r24, 0x0c	; 12

}
  b2:	08 95       	ret

000000b4 <Uart_Send_String>:

void Uart_Send_String( char *Str)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
	unsigned short i=0;
	while(Str[i]!='\0'){
  ba:	88 81       	ld	r24, Y
  bc:	88 23       	and	r24, r24
  be:	31 f0       	breq	.+12     	; 0xcc <Uart_Send_String+0x18>
  c0:	21 96       	adiw	r28, 0x01	; 1
		Uart_Send_Char(Str[i]);
  c2:	0e 94 52 00 	call	0xa4	; 0xa4 <Uart_Send_Char>
}

void Uart_Send_String( char *Str)
{
	unsigned short i=0;
	while(Str[i]!='\0'){
  c6:	89 91       	ld	r24, Y+
  c8:	81 11       	cpse	r24, r1
  ca:	fb cf       	rjmp	.-10     	; 0xc2 <Uart_Send_String+0xe>
		Uart_Send_Char(Str[i]);
		i++;
	}
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <SPI_Init>:
void SPI_Init(){
	//data direction for SPI bus Pins
	DDRB|=(1<<MOSI)|(1<<SCK);
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	80 6a       	ori	r24, 0xA0	; 160
  d6:	87 bb       	out	0x17, r24	; 23
	DDRC|=(1<<CS)|(1<<LED0);
  d8:	84 b3       	in	r24, 0x14	; 20
  da:	81 61       	ori	r24, 0x11	; 17
  dc:	84 bb       	out	0x14, r24	; 20
	//MODE0-CPOL=0 CPHA=0 , SPE=1 , MSTR=1 DORD=MSB(0) , SPEED=FOSC/16=1Mhz
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPR0);
  de:	8d b1       	in	r24, 0x0d	; 13
  e0:	81 65       	ori	r24, 0x51	; 81
  e2:	8d b9       	out	0x0d, r24	; 13
  e4:	08 95       	ret

000000e6 <SPI_Transfer>:
	
}

unsigned char SPI_Transfer(unsigned char sendByte){
	//
	SPDR=sendByte;
  e6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  e8:	77 9b       	sbis	0x0e, 7	; 14
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <SPI_Transfer+0x2>
	return SPDR;
  ec:	8f b1       	in	r24, 0x0f	; 15
  ee:	08 95       	ret

000000f0 <main>:
volatile char recv_buf,recv_flag,recv_byte;

int main(void)
{
	
	DDRC|=(1<<PC2)|(1<<PC3)|(1<<PC1)|(1<<PC0);
  f0:	84 b3       	in	r24, 0x14	; 20
  f2:	8f 60       	ori	r24, 0x0F	; 15
  f4:	84 bb       	out	0x14, r24	; 20
	Uart_Init ();
  f6:	0e 94 49 00 	call	0x92	; 0x92 <Uart_Init>
	Uart_Send_String("ABDO \r \n");
  fa:	80 e6       	ldi	r24, 0x60	; 96
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <Uart_Send_String>
	char data ;
	SPI_Init();
 102:	0e 94 69 00 	call	0xd2	; 0xd2 <SPI_Init>
			unsigned char recvByte_2=SPI_Transfer(0xDD);
			SS_DISABLE();
			_delay_ms(1000);
			if (recvByte_2==0x77)
			{
				PORTC^=(1<<PC2);
 106:	14 e0       	ldi	r17, 0x04	; 4
			unsigned char recvByte_3=SPI_Transfer(0xFF);
			SS_DISABLE();
			_delay_ms(1000);
			if (recvByte_3==0x88)
			{
				PORTC^=(1<<PC4);
 108:	c0 e1       	ldi	r28, 0x10	; 16
			unsigned char recvByte_1=SPI_Transfer(0xBB);
			SS_DISABLE();
			_delay_ms(1000);
			if (recvByte_1==0x66)
			{
				PORTC^=(1<<PC1);
 10a:	d2 e0       	ldi	r29, 0x02	; 2
	Uart_Send_String("ABDO \r \n");
	char data ;
	SPI_Init();
	while (1)
	{
		data =Uart_Receive();
 10c:	0e 94 56 00 	call	0xac	; 0xac <Uart_Receive>
		switch(data)
 110:	82 33       	cpi	r24, 0x32	; 50
 112:	39 f1       	breq	.+78     	; 0x162 <main+0x72>
 114:	18 f4       	brcc	.+6      	; 0x11c <main+0x2c>
 116:	81 33       	cpi	r24, 0x31	; 49
 118:	39 f0       	breq	.+14     	; 0x128 <main+0x38>
 11a:	f8 cf       	rjmp	.-16     	; 0x10c <main+0x1c>
 11c:	83 33       	cpi	r24, 0x33	; 51
 11e:	f1 f1       	breq	.+124    	; 0x19c <main+0xac>
 120:	84 33       	cpi	r24, 0x34	; 52
 122:	09 f4       	brne	.+2      	; 0x126 <main+0x36>
 124:	59 c0       	rjmp	.+178    	; 0x1d8 <main+0xe8>
 126:	f2 cf       	rjmp	.-28     	; 0x10c <main+0x1c>
		{
			case '1' :
			SS_ENABLE();
 128:	a8 98       	cbi	0x15, 0	; 21
			unsigned char recvByte=SPI_Transfer(0xAA);
 12a:	8a ea       	ldi	r24, 0xAA	; 170
 12c:	0e 94 73 00 	call	0xe6	; 0xe6 <SPI_Transfer>
			SS_DISABLE();
 130:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	33 ed       	ldi	r19, 0xD3	; 211
 136:	90 e3       	ldi	r25, 0x30	; 48
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x48>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x52>
 142:	00 00       	nop
			_delay_ms(1000);
			if (recvByte==0x55)
 144:	85 35       	cpi	r24, 0x55	; 85
 146:	11 f7       	brne	.-60     	; 0x10c <main+0x1c>
			{
				PORTC^=(1<<LED0);
 148:	85 b3       	in	r24, 0x15	; 21
 14a:	8c 27       	eor	r24, r28
 14c:	85 bb       	out	0x15, r24	; 21
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	33 ed       	ldi	r19, 0xD3	; 211
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	21 50       	subi	r18, 0x01	; 1
 156:	30 40       	sbci	r19, 0x00	; 0
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x64>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x6e>
 15e:	00 00       	nop
 160:	d5 cf       	rjmp	.-86     	; 0x10c <main+0x1c>
				_delay_ms(1000);
			}
			break;
			case '2' :
			SS_ENABLE();
 162:	a8 98       	cbi	0x15, 0	; 21
			unsigned char recvByte_1=SPI_Transfer(0xBB);
 164:	8b eb       	ldi	r24, 0xBB	; 187
 166:	0e 94 73 00 	call	0xe6	; 0xe6 <SPI_Transfer>
			SS_DISABLE();
 16a:	a8 9a       	sbi	0x15, 0	; 21
 16c:	9f ef       	ldi	r25, 0xFF	; 255
 16e:	23 ed       	ldi	r18, 0xD3	; 211
 170:	30 e3       	ldi	r19, 0x30	; 48
 172:	91 50       	subi	r25, 0x01	; 1
 174:	20 40       	sbci	r18, 0x00	; 0
 176:	30 40       	sbci	r19, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x82>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x8c>
 17c:	00 00       	nop
			_delay_ms(1000);
			if (recvByte_1==0x66)
 17e:	86 36       	cpi	r24, 0x66	; 102
 180:	29 f6       	brne	.-118    	; 0x10c <main+0x1c>
			{
				PORTC^=(1<<PC1);
 182:	85 b3       	in	r24, 0x15	; 21
 184:	8d 27       	eor	r24, r29
 186:	85 bb       	out	0x15, r24	; 21
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	93 ed       	ldi	r25, 0xD3	; 211
 18c:	20 e3       	ldi	r18, 0x30	; 48
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	20 40       	sbci	r18, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x9e>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0xa8>
 198:	00 00       	nop
 19a:	b8 cf       	rjmp	.-144    	; 0x10c <main+0x1c>
				_delay_ms(1000);
			}
			break;
			case '3' :
			SS_ENABLE();
 19c:	a8 98       	cbi	0x15, 0	; 21
			unsigned char recvByte_2=SPI_Transfer(0xDD);
 19e:	8d ed       	ldi	r24, 0xDD	; 221
 1a0:	0e 94 73 00 	call	0xe6	; 0xe6 <SPI_Transfer>
			SS_DISABLE();
 1a4:	a8 9a       	sbi	0x15, 0	; 21
 1a6:	3f ef       	ldi	r19, 0xFF	; 255
 1a8:	93 ed       	ldi	r25, 0xD3	; 211
 1aa:	20 e3       	ldi	r18, 0x30	; 48
 1ac:	31 50       	subi	r19, 0x01	; 1
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	20 40       	sbci	r18, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0xbc>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xc6>
 1b6:	00 00       	nop
			_delay_ms(1000);
			if (recvByte_2==0x77)
 1b8:	87 37       	cpi	r24, 0x77	; 119
 1ba:	09 f0       	breq	.+2      	; 0x1be <main+0xce>
 1bc:	a7 cf       	rjmp	.-178    	; 0x10c <main+0x1c>
			{
				PORTC^=(1<<PC2);
 1be:	85 b3       	in	r24, 0x15	; 21
 1c0:	81 27       	eor	r24, r17
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	3f ef       	ldi	r19, 0xFF	; 255
 1c6:	83 ed       	ldi	r24, 0xD3	; 211
 1c8:	90 e3       	ldi	r25, 0x30	; 48
 1ca:	31 50       	subi	r19, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0xda>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0xe4>
 1d4:	00 00       	nop
 1d6:	9a cf       	rjmp	.-204    	; 0x10c <main+0x1c>
				_delay_ms(1000);
			}
			break;
			case '4' :
			SS_ENABLE();
 1d8:	a8 98       	cbi	0x15, 0	; 21
			unsigned char recvByte_3=SPI_Transfer(0xFF);
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	0e 94 73 00 	call	0xe6	; 0xe6 <SPI_Transfer>
			SS_DISABLE();
 1e0:	a8 9a       	sbi	0x15, 0	; 21
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	33 ed       	ldi	r19, 0xD3	; 211
 1e6:	90 e3       	ldi	r25, 0x30	; 48
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	30 40       	sbci	r19, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xf8>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x102>
 1f2:	00 00       	nop
			_delay_ms(1000);
			if (recvByte_3==0x88)
 1f4:	88 38       	cpi	r24, 0x88	; 136
 1f6:	09 f0       	breq	.+2      	; 0x1fa <main+0x10a>
 1f8:	89 cf       	rjmp	.-238    	; 0x10c <main+0x1c>
			{
				PORTC^=(1<<PC4);
 1fa:	85 b3       	in	r24, 0x15	; 21
 1fc:	8c 27       	eor	r24, r28
 1fe:	85 bb       	out	0x15, r24	; 21
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	33 ed       	ldi	r19, 0xD3	; 211
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	21 50       	subi	r18, 0x01	; 1
 208:	30 40       	sbci	r19, 0x00	; 0
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x116>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x120>
 210:	00 00       	nop
 212:	7c cf       	rjmp	.-264    	; 0x10c <main+0x1c>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
