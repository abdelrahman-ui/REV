
Uart_Layer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c4  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ef  00000000  00000000  00001082  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bc  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012f  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8a:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Uart_Init>:
}

void Uart_Init (Uart_Config *config)
{
	// Initialize Boud Rate
	UBRRL=BAUD_EQ;
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	89 b9       	out	0x09, r24	; 9
	// Transimate & Resive & Enable interrupt of reciver complete
	UCSRB |=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	88 69       	ori	r24, 0x98	; 152
  9a:	8a b9       	out	0x0a, r24	; 10
	//Number Of Stop bits & size from [5.....9] & No parity & Asynchronous
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  9c:	80 b5       	in	r24, 0x20	; 32
  9e:	86 68       	ori	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <Uart_Send_Char>:


void Uart_Send_Char( unsigned char data)
{
	//Send data
	while(!(UCSRA&(1<<UDRE)));//polling
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <Uart_Send_Char>
	UDR=data;
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <Uart_Receive>:
}


char Uart_Receive()
{
	while(!(UCSRA&(1<<RXC)));   //make sure i have data now
  ac:	5f 9b       	sbis	0x0b, 7	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <Uart_Receive>
	return UDR;
  b0:	8c b1       	in	r24, 0x0c	; 12

}
  b2:	08 95       	ret

000000b4 <Uart_Send_String>:

void Uart_Send_String( char *Str)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
	unsigned short i=0;
	while(Str[i]!='\0'){
  ba:	88 81       	ld	r24, Y
  bc:	88 23       	and	r24, r24
  be:	31 f0       	breq	.+12     	; 0xcc <Uart_Send_String+0x18>
  c0:	21 96       	adiw	r28, 0x01	; 1
		Uart_Send_Char(Str[i]);
  c2:	0e 94 52 00 	call	0xa4	; 0xa4 <Uart_Send_Char>
}

void Uart_Send_String( char *Str)
{
	unsigned short i=0;
	while(Str[i]!='\0'){
  c6:	89 91       	ld	r24, Y+
  c8:	81 11       	cpse	r24, r1
  ca:	fb cf       	rjmp	.-10     	; 0xc2 <Uart_Send_String+0xe>
		Uart_Send_Char(Str[i]);
		i++;
	}
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <main>:



int main(void)
{
	DDRC|=(1<<PC2);
  d2:	a2 9a       	sbi	0x14, 2	; 20
	Uart_Init ();
  d4:	0e 94 49 00 	call	0x92	; 0x92 <Uart_Init>
	Uart_Send_String("ABDO \r \n");
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 5a 00 	call	0xb4	; 0xb4 <Uart_Send_String>
	char data ;
	while (1)
	{
		data =Uart_Receive();
  e0:	0e 94 56 00 	call	0xac	; 0xac <Uart_Receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	33 ed       	ldi	r19, 0xD3	; 211
  e8:	90 e3       	ldi	r25, 0x30	; 48
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	30 40       	sbci	r19, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x18>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x22>
  f4:	00 00       	nop
		_delay_ms(1000);
		if (data =='1')
  f6:	81 33       	cpi	r24, 0x31	; 49
  f8:	11 f4       	brne	.+4      	; 0xfe <main+0x2c>
		{
			PORTC|=(1<<PC2);
  fa:	aa 9a       	sbi	0x15, 2	; 21
  fc:	01 c0       	rjmp	.+2      	; 0x100 <main+0x2e>
		}
		else
		{
			PORTC&=~(1<<PC2);
  fe:	aa 98       	cbi	0x15, 2	; 21
		}
		Uart_Send_Char(data);
 100:	0e 94 52 00 	call	0xa4	; 0xa4 <Uart_Send_Char>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	33 ed       	ldi	r19, 0xD3	; 211
 108:	80 e3       	ldi	r24, 0x30	; 48
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	30 40       	sbci	r19, 0x00	; 0
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x38>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x42>
 114:	00 00       	nop
 116:	e4 cf       	rjmp	.-56     	; 0xe0 <main+0xe>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
