
External_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059a  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00000ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f2  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <util/delay.h>
#include "bit_math.h"
#define  PD2  2

ISR (INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTA^=(1<<Led_0);
  7a:	9b b3       	in	r25, 0x1b	; 27
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	89 27       	eor	r24, r25
  80:	8b bb       	out	0x1b, r24	; 27
	while(GET_BIT(PIND,PD2));
  82:	82 99       	sbic	0x10, 2	; 16
  84:	fe cf       	rjmp	.-4      	; 0x82 <__vector_1+0x16>
	PORTA^=(1<<Led_0);
  86:	9b b3       	in	r25, 0x1b	; 27
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	89 27       	eor	r24, r25
  8c:	8b bb       	out	0x1b, r24	; 27
}
  8e:	9f 91       	pop	r25
  90:	8f 91       	pop	r24
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <__vector_2>:

ISR (INT1_vect)
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
	PORTA^=(1<<Led_1);
  aa:	9b b3       	in	r25, 0x1b	; 27
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	89 27       	eor	r24, r25
  b0:	8b bb       	out	0x1b, r24	; 27
	while(GET_BIT(PIND,PD3));
  b2:	83 99       	sbic	0x10, 3	; 16
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <__vector_2+0x16>
	PORTA^=(1<<Led_1);
  b6:	9b b3       	in	r25, 0x1b	; 27
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	89 27       	eor	r24, r25
  bc:	8b bb       	out	0x1b, r24	; 27
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void)
{
	DDRA|=(1<<Led_0)|(1<<Led_1);
  cc:	8a b3       	in	r24, 0x1a	; 26
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	8a bb       	out	0x1a, r24	; 26
    //Enable pin interrupt from GICR
	GICR|=(1<<INT0);
  d2:	8b b7       	in	r24, 0x3b	; 59
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8b bf       	out	0x3b, r24	; 59
	GICR|=(1<<INT1);
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	8b bf       	out	0x3b, r24	; 59
	//Change at Raissing edag
	MCUCR|=(1<<ISC00)|(1<<ISC01);
  de:	85 b7       	in	r24, 0x35	; 53
  e0:	83 60       	ori	r24, 0x03	; 3
  e2:	85 bf       	out	0x35, r24	; 53
	MCUCR|=(1<<ISC10)|(1<<ISC11);
  e4:	85 b7       	in	r24, 0x35	; 53
  e6:	8c 60       	ori	r24, 0x0C	; 12
  e8:	85 bf       	out	0x35, r24	; 53
	//Enable Global 
	sei();
  ea:	78 94       	sei
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0x20>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
