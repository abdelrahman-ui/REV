
SPI_Slave_AMIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a7  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f9  00000000  00000000  0000086f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007a  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DC_Init>:
}

void DC_Init()
{
	//dir of 0c0
	DDRB|=(1<<PB3);
  6c:	bb 9a       	sbi	0x17, 3	; 23
	DDRD|=(1<<PD0)|(1<<PD1);
  6e:	81 b3       	in	r24, 0x11	; 17
  70:	83 60       	ori	r24, 0x03	; 3
  72:	81 bb       	out	0x11, r24	; 17

	// Fast _ pwm _ non inverting _no prescaler _ toggle on compare match
	TCCR0|=(1<<COM01)|(1<<CS00)|(1<<WGM01)|(1<<WGM00);//|(1<<CS02);  //no prescaler ,toggle at com
  74:	83 b7       	in	r24, 0x33	; 51
  76:	89 66       	ori	r24, 0x69	; 105
  78:	83 bf       	out	0x33, r24	; 51
	//Turn On interrupt OVER FLOW
	//TIMSK|=(1<<TOV0)|(1<<OCIE0); //to enable interrupt
	//Global
	//sei();
	OCR0=255;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	8c bf       	out	0x3c, r24	; 60
  7e:	08 95       	ret

00000080 <SPI_Transfer>:
}
unsigned char SPI_Transfer(unsigned char sendByte){
	
	SPDR =sendByte;
  80:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <SPI_Transfer+0x2>
	return SPDR;
  86:	8f b1       	in	r24, 0x0f	; 15
  88:	08 95       	ret

0000008a <main>:

void DC_Init();
unsigned char SPI_Transfer(unsigned char sendByte);
int main(void)
{
	DC_Init();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <DC_Init>
	DDRB|=(1<<MISO);
  8e:	be 9a       	sbi	0x17, 6	; 23
	DDRB&=~(1<<SS); //input pin
  90:	bc 98       	cbi	0x17, 4	; 23
	DDRC|=(1<<LED0);
  92:	a2 9a       	sbi	0x14, 2	; 20
	
	SPCR|=(1<<SPE);
  94:	6e 9a       	sbi	0x0d, 6	; 13
		unsigned char recv=SPI_Transfer(0x55);
		_delay_ms(1000);
		if(recv==0xAA){
			PORTD|=(1<<PD1);
			PORTD&=~(1<<PD0);
			PORTC^=(1<<LED0);
  96:	c4 e0       	ldi	r28, 0x04	; 4
	
	SPCR|=(1<<SPE);

    while (1) 
    {
		unsigned char recv=SPI_Transfer(0x55);
  98:	85 e5       	ldi	r24, 0x55	; 85
  9a:	0e 94 40 00 	call	0x80	; 0x80 <SPI_Transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	33 ed       	ldi	r19, 0xD3	; 211
  a2:	90 e3       	ldi	r25, 0x30	; 48
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x1a>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x24>
  ae:	00 00       	nop
		_delay_ms(1000);
		if(recv==0xAA){
  b0:	8a 3a       	cpi	r24, 0xAA	; 170
  b2:	91 f7       	brne	.-28     	; 0x98 <main+0xe>
			PORTD|=(1<<PD1);
  b4:	91 9a       	sbi	0x12, 1	; 18
			PORTD&=~(1<<PD0);
  b6:	90 98       	cbi	0x12, 0	; 18
			PORTC^=(1<<LED0);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	8c 27       	eor	r24, r28
  bc:	85 bb       	out	0x15, r24	; 21
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	33 ed       	ldi	r19, 0xD3	; 211
  c2:	80 e3       	ldi	r24, 0x30	; 48
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x3a>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x44>
  ce:	00 00       	nop
  d0:	e3 cf       	rjmp	.-58     	; 0x98 <main+0xe>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
