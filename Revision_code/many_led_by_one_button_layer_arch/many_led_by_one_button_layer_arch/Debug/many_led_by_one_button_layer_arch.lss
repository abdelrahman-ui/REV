
many_led_by_one_button_layer_arch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000044e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e1d  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000780  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055b  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000020d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000693  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000675  00000000  00000000  00002807  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9a 01 	call	0x334	; 0x334 <main>
  7a:	0c 94 25 02 	jmp	0x44a	; 0x44a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_WriteChannel>:
*
*/
void Dio_WriteChannel(Dio_ChannelType channel,STD_levelType level){
	
		Dio_PortType channel_port=channel/8;
		Dio_ChannelType ChannelPos =channel%8;
  82:	98 2f       	mov	r25, r24
  84:	97 70       	andi	r25, 0x07	; 7
		
		switch(channel_port){
  86:	86 95       	lsr	r24
  88:	86 95       	lsr	r24
  8a:	86 95       	lsr	r24
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <Dio_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <Dio_WriteChannel+0x1c>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <Dio_WriteChannel+0x90>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <Dio_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <Dio_WriteChannel+0xca>
  9c:	08 95       	ret
			case Dio_Port_A:
			if(level == STD_low)
  9e:	61 11       	cpse	r22, r1
  a0:	0e c0       	rjmp	.+28     	; 0xbe <Dio_WriteChannel+0x3c>
			{
				CLR_BIT(PORTA_REG,ChannelPos );
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <Dio_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	9a 95       	dec	r25
  b2:	e2 f7       	brpl	.-8      	; 0xac <Dio_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	80 95       	com	r24
  b8:	84 23       	and	r24, r20
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTA_REG,ChannelPos );
  be:	4b b3       	in	r20, 0x1b	; 27
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	b9 01       	movw	r22, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <Dio_WriteChannel+0x4a>
  c8:	66 0f       	add	r22, r22
  ca:	77 1f       	adc	r23, r23
  cc:	9a 95       	dec	r25
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <Dio_WriteChannel+0x46>
  d0:	cb 01       	movw	r24, r22
  d2:	84 2b       	or	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
			}
			break;
			case Dio_Port_B:
			if(level == STD_low)
  d8:	61 11       	cpse	r22, r1
  da:	0e c0       	rjmp	.+28     	; 0xf8 <Dio_WriteChannel+0x76>
			{
				CLR_BIT(PORTB_REG,ChannelPos );
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTB_REG,ChannelPos );
  f8:	48 b3       	in	r20, 0x18	; 24
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <Dio_WriteChannel+0x84>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	9a 95       	dec	r25
 108:	e2 f7       	brpl	.-8      	; 0x102 <Dio_WriteChannel+0x80>
 10a:	cb 01       	movw	r24, r22
 10c:	84 2b       	or	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
			} 
			break;
			case Dio_Port_C: 
			if(level == STD_low)
 112:	61 11       	cpse	r22, r1
 114:	0e c0       	rjmp	.+28     	; 0x132 <Dio_WriteChannel+0xb0>
			{
				CLR_BIT(PORTC_REG,ChannelPos );
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Dio_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	9a 95       	dec	r25
 126:	e2 f7       	brpl	.-8      	; 0x120 <Dio_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	80 95       	com	r24
 12c:	84 23       	and	r24, r20
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTC_REG,ChannelPos );
 132:	45 b3       	in	r20, 0x15	; 21
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	b9 01       	movw	r22, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Dio_WriteChannel+0xbe>
 13c:	66 0f       	add	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	9a 95       	dec	r25
 142:	e2 f7       	brpl	.-8      	; 0x13c <Dio_WriteChannel+0xba>
 144:	cb 01       	movw	r24, r22
 146:	84 2b       	or	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
			}
			break;
			case Dio_Port_D: 
			if(level == STD_low)
 14c:	61 11       	cpse	r22, r1
 14e:	0e c0       	rjmp	.+28     	; 0x16c <Dio_WriteChannel+0xea>
			{
				CLR_BIT(PORTD_REG,ChannelPos );
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <Dio_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	9a 95       	dec	r25
 160:	e2 f7       	brpl	.-8      	; 0x15a <Dio_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	80 95       	com	r24
 166:	84 23       	and	r24, r20
 168:	82 bb       	out	0x12, r24	; 18
 16a:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTD_REG,ChannelPos );
 16c:	42 b3       	in	r20, 0x12	; 18
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	b9 01       	movw	r22, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <Dio_WriteChannel+0xf8>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	9a 95       	dec	r25
 17c:	e2 f7       	brpl	.-8      	; 0x176 <Dio_WriteChannel+0xf4>
 17e:	cb 01       	movw	r24, r22
 180:	84 2b       	or	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_Read>:
/*
*Read channel
*/
void DIO_Read(Dio_ChannelType channel,uint8 *data){
	Dio_PortType channel_port=channel/8;
	Dio_ChannelType channelPos=channel%8;
 186:	98 2f       	mov	r25, r24
 188:	97 70       	andi	r25, 0x07	; 7
	switch(channel_port){
 18a:	86 95       	lsr	r24
 18c:	86 95       	lsr	r24
 18e:	86 95       	lsr	r24
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	a1 f0       	breq	.+40     	; 0x1bc <DIO_Read+0x36>
 194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_Read+0x1a>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	f9 f0       	breq	.+62     	; 0x1d8 <DIO_Read+0x52>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	59 f1       	breq	.+86     	; 0x1f4 <DIO_Read+0x6e>
 19e:	08 95       	ret
		case Dio_Port_A:
				*data=GET_BIT(PINA_REG,channelPos);
 1a0:	89 b3       	in	r24, 0x19	; 25
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	a9 01       	movw	r20, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_Read+0x28>
 1aa:	55 95       	asr	r21
 1ac:	47 95       	ror	r20
 1ae:	9a 95       	dec	r25
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_Read+0x24>
 1b2:	ca 01       	movw	r24, r20
 1b4:	81 70       	andi	r24, 0x01	; 1
 1b6:	fb 01       	movw	r30, r22
 1b8:	80 83       	st	Z, r24
		break;
 1ba:	08 95       	ret
		
		case Dio_Port_B:		
				*data=GET_BIT(PINB_REG,channelPos);
 1bc:	86 b3       	in	r24, 0x16	; 22
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	a9 01       	movw	r20, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_Read+0x44>
 1c6:	55 95       	asr	r21
 1c8:	47 95       	ror	r20
 1ca:	9a 95       	dec	r25
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_Read+0x40>
 1ce:	ca 01       	movw	r24, r20
 1d0:	81 70       	andi	r24, 0x01	; 1
 1d2:	fb 01       	movw	r30, r22
 1d4:	80 83       	st	Z, r24
		break;
 1d6:	08 95       	ret
		case Dio_Port_C:
				*data=GET_BIT(PINC_REG,channelPos);
 1d8:	83 b3       	in	r24, 0x13	; 19
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	a9 01       	movw	r20, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_Read+0x60>
 1e2:	55 95       	asr	r21
 1e4:	47 95       	ror	r20
 1e6:	9a 95       	dec	r25
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_Read+0x5c>
 1ea:	ca 01       	movw	r24, r20
 1ec:	81 70       	andi	r24, 0x01	; 1
 1ee:	fb 01       	movw	r30, r22
 1f0:	80 83       	st	Z, r24
		break;
 1f2:	08 95       	ret
		
		case Dio_Port_D:
				*data=GET_BIT(PIND_REG,channelPos);
 1f4:	80 b3       	in	r24, 0x10	; 16
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	a9 01       	movw	r20, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_Read+0x7c>
 1fe:	55 95       	asr	r21
 200:	47 95       	ror	r20
 202:	9a 95       	dec	r25
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_Read+0x78>
 206:	ca 01       	movw	r24, r20
 208:	81 70       	andi	r24, 0x01	; 1
 20a:	fb 01       	movw	r30, r22
 20c:	80 83       	st	Z, r24
 20e:	08 95       	ret

00000210 <Dio_ReadChannel>:
STD_levelType Dio_ReadChannel(Dio_ChannelType Channel)
{
	STD_levelType level;
	Dio_PortType channel_port=Channel/8;
	Dio_ChannelType channelPos=Channel%8;
	switch(channel_port){
 210:	86 95       	lsr	r24
 212:	86 95       	lsr	r24
 214:	86 95       	lsr	r24
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	41 f0       	breq	.+16     	; 0x22a <Dio_ReadChannel+0x1a>
 21a:	28 f0       	brcs	.+10     	; 0x226 <Dio_ReadChannel+0x16>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	39 f0       	breq	.+14     	; 0x22e <Dio_ReadChannel+0x1e>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	39 f0       	breq	.+14     	; 0x232 <Dio_ReadChannel+0x22>
 224:	08 95       	ret
		case Dio_Port_A:
			level =GET_BIT(PINA_REG,channelPos);
 226:	89 b3       	in	r24, 0x19	; 25
		break;
 228:	08 95       	ret
		
		case Dio_Port_B:
			level =GET_BIT(PINB_REG,channelPos);
 22a:	86 b3       	in	r24, 0x16	; 22
		break;
 22c:	08 95       	ret
		case Dio_Port_C:
			level =GET_BIT(PINC_REG,channelPos);
 22e:	83 b3       	in	r24, 0x13	; 19
		break;
 230:	08 95       	ret
		
		case Dio_Port_D:
			level =GET_BIT(PIND_REG,channelPos);
 232:	80 b3       	in	r24, 0x10	; 16
		break;
		
		return level;
	}
 234:	08 95       	ret

00000236 <Dio_init>:
/*PD6*/		{Output,STD_low},
/*PD7*/		{Output,STD_low},
};

void Dio_init(void)
{
 236:	e0 e6       	ldi	r30, 0x60	; 96
 238:	f0 e0       	ldi	r31, 0x00	; 0
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
 23a:	80 e0       	ldi	r24, 0x00	; 0
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,currentPin);
				break;
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,currentPin);
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	50 e0       	ldi	r21, 0x00	; 0
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
	{
		currentPin = counter % 8;
 240:	38 2f       	mov	r19, r24
 242:	37 70       	andi	r19, 0x07	; 7
		currentPort = counter /8;
 244:	98 2f       	mov	r25, r24
 246:	96 95       	lsr	r25
 248:	96 95       	lsr	r25
 24a:	96 95       	lsr	r25
		if(Dio_pin_config[counter].pinDirection ==Output)
 24c:	20 81       	ld	r18, Z
 24e:	21 30       	cpi	r18, 0x01	; 1
 250:	a1 f5       	brne	.+104    	; 0x2ba <Dio_init+0x84>
		{
			switch (currentPort)
 252:	91 30       	cpi	r25, 0x01	; 1
 254:	89 f0       	breq	.+34     	; 0x278 <Dio_init+0x42>
 256:	28 f0       	brcs	.+10     	; 0x262 <Dio_init+0x2c>
 258:	92 30       	cpi	r25, 0x02	; 2
 25a:	c9 f0       	breq	.+50     	; 0x28e <Dio_init+0x58>
 25c:	93 30       	cpi	r25, 0x03	; 3
 25e:	11 f1       	breq	.+68     	; 0x2a4 <Dio_init+0x6e>
 260:	63 c0       	rjmp	.+198    	; 0x328 <Dio_init+0xf2>
			{
				case Dio_Port_A:
				SET_BIT(DDRA_REG,currentPin);
 262:	9a b3       	in	r25, 0x1a	; 26
 264:	ba 01       	movw	r22, r20
 266:	02 c0       	rjmp	.+4      	; 0x26c <Dio_init+0x36>
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	3a 95       	dec	r19
 26e:	e2 f7       	brpl	.-8      	; 0x268 <Dio_init+0x32>
 270:	9b 01       	movw	r18, r22
 272:	29 2b       	or	r18, r25
 274:	2a bb       	out	0x1a, r18	; 26
				break;
 276:	58 c0       	rjmp	.+176    	; 0x328 <Dio_init+0xf2>
				case Dio_Port_B:
				SET_BIT(DDRB_REG,currentPin);
 278:	97 b3       	in	r25, 0x17	; 23
 27a:	ba 01       	movw	r22, r20
 27c:	02 c0       	rjmp	.+4      	; 0x282 <Dio_init+0x4c>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	3a 95       	dec	r19
 284:	e2 f7       	brpl	.-8      	; 0x27e <Dio_init+0x48>
 286:	9b 01       	movw	r18, r22
 288:	29 2b       	or	r18, r25
 28a:	27 bb       	out	0x17, r18	; 23
				break;
 28c:	4d c0       	rjmp	.+154    	; 0x328 <Dio_init+0xf2>
				case Dio_Port_C:
				SET_BIT(DDRC_REG,currentPin);
 28e:	94 b3       	in	r25, 0x14	; 20
 290:	ba 01       	movw	r22, r20
 292:	02 c0       	rjmp	.+4      	; 0x298 <Dio_init+0x62>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	3a 95       	dec	r19
 29a:	e2 f7       	brpl	.-8      	; 0x294 <Dio_init+0x5e>
 29c:	9b 01       	movw	r18, r22
 29e:	29 2b       	or	r18, r25
 2a0:	24 bb       	out	0x14, r18	; 20
				break;
 2a2:	42 c0       	rjmp	.+132    	; 0x328 <Dio_init+0xf2>
				case Dio_Port_D:
				SET_BIT(DDRD_REG,currentPin);
 2a4:	91 b3       	in	r25, 0x11	; 17
 2a6:	ba 01       	movw	r22, r20
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Dio_init+0x78>
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	3a 95       	dec	r19
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <Dio_init+0x74>
 2b2:	9b 01       	movw	r18, r22
 2b4:	29 2b       	or	r18, r25
 2b6:	21 bb       	out	0x11, r18	; 17
				break;
 2b8:	37 c0       	rjmp	.+110    	; 0x328 <Dio_init+0xf2>
			}//switch
		}//if
		else
		{
			switch (currentPort)
 2ba:	91 30       	cpi	r25, 0x01	; 1
 2bc:	91 f0       	breq	.+36     	; 0x2e2 <Dio_init+0xac>
 2be:	28 f0       	brcs	.+10     	; 0x2ca <Dio_init+0x94>
 2c0:	92 30       	cpi	r25, 0x02	; 2
 2c2:	d9 f0       	breq	.+54     	; 0x2fa <Dio_init+0xc4>
 2c4:	93 30       	cpi	r25, 0x03	; 3
 2c6:	29 f1       	breq	.+74     	; 0x312 <Dio_init+0xdc>
 2c8:	2f c0       	rjmp	.+94     	; 0x328 <Dio_init+0xf2>
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,currentPin);
 2ca:	2a b3       	in	r18, 0x1a	; 26
 2cc:	ba 01       	movw	r22, r20
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <Dio_init+0x9e>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	3a 95       	dec	r19
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <Dio_init+0x9a>
 2d8:	96 2f       	mov	r25, r22
 2da:	90 95       	com	r25
 2dc:	92 23       	and	r25, r18
 2de:	9a bb       	out	0x1a, r25	; 26
				break;
 2e0:	23 c0       	rjmp	.+70     	; 0x328 <Dio_init+0xf2>
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,currentPin);
 2e2:	27 b3       	in	r18, 0x17	; 23
 2e4:	ba 01       	movw	r22, r20
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <Dio_init+0xb6>
 2e8:	66 0f       	add	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	3a 95       	dec	r19
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <Dio_init+0xb2>
 2f0:	96 2f       	mov	r25, r22
 2f2:	90 95       	com	r25
 2f4:	92 23       	and	r25, r18
 2f6:	97 bb       	out	0x17, r25	; 23
				break;
 2f8:	17 c0       	rjmp	.+46     	; 0x328 <Dio_init+0xf2>
				case Dio_Port_C:
				CLR_BIT(DDRC_REG,currentPin);
 2fa:	24 b3       	in	r18, 0x14	; 20
 2fc:	ba 01       	movw	r22, r20
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <Dio_init+0xce>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	3a 95       	dec	r19
 306:	e2 f7       	brpl	.-8      	; 0x300 <Dio_init+0xca>
 308:	96 2f       	mov	r25, r22
 30a:	90 95       	com	r25
 30c:	92 23       	and	r25, r18
 30e:	94 bb       	out	0x14, r25	; 20
				break;
 310:	0b c0       	rjmp	.+22     	; 0x328 <Dio_init+0xf2>
				case Dio_Port_D:
				CLR_BIT(DDRD_REG,currentPin);
 312:	21 b3       	in	r18, 0x11	; 17
 314:	ba 01       	movw	r22, r20
 316:	02 c0       	rjmp	.+4      	; 0x31c <Dio_init+0xe6>
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	3a 95       	dec	r19
 31e:	e2 f7       	brpl	.-8      	; 0x318 <Dio_init+0xe2>
 320:	96 2f       	mov	r25, r22
 322:	90 95       	com	r25
 324:	92 23       	and	r25, r18
 326:	91 bb       	out	0x11, r25	; 17
void Dio_init(void)
{
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	32 96       	adiw	r30, 0x02	; 2
 32c:	80 32       	cpi	r24, 0x20	; 32
 32e:	09 f0       	breq	.+2      	; 0x332 <Dio_init+0xfc>
 330:	87 cf       	rjmp	.-242    	; 0x240 <Dio_init+0xa>
				break;
			}//switch
			
		}//else
	}//for
 332:	08 95       	ret

00000334 <main>:
#define LED_2 3
#define LED_3 4


int main(void)
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	1f 92       	push	r1
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
    uint8 value,count=1;
	Dio_init();
 33e:	0e 94 1b 01 	call	0x236	; 0x236 <Dio_init>
#define LED_3 4


int main(void)
{
    uint8 value,count=1;
 342:	11 e0       	ldi	r17, 0x01	; 1
					    Dio_WriteChannel(Dio_Channel_A1,STD_high);
						_delay_ms(60);
				    }
				    Dio_WriteChannel(Dio_Channel_A1,STD_low);
				    
				count++;
 344:	03 e0       	ldi	r16, 0x03	; 3
					Dio_WriteChannel(Dio_Channel_A2,STD_high);
					_delay_ms(60);
				}
				Dio_WriteChannel(Dio_Channel_A2,STD_low);
				
				count++;
 346:	68 94       	set
 348:	ff 24       	eor	r15, r15
 34a:	f2 f8       	bld	r15, 2
{
    uint8 value,count=1;
	Dio_init();
    while (1) 
    {
		DIO_Read(Dio_Channel_D0,&value);
 34c:	be 01       	movw	r22, r28
 34e:	6f 5f       	subi	r22, 0xFF	; 255
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	88 e1       	ldi	r24, 0x18	; 24
 354:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_Read>
		if(value==1)
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	b9 f7       	brne	.-18     	; 0x34c <main+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35e:	2f ef       	ldi	r18, 0xFF	; 255
 360:	89 ef       	ldi	r24, 0xF9	; 249
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	21 50       	subi	r18, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <main+0x30>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x3a>
 36e:	00 00       	nop
		{
			_delay_ms(20);
			switch(count)
 370:	12 30       	cpi	r17, 0x02	; 2
 372:	81 f1       	breq	.+96     	; 0x3d4 <main+0xa0>
 374:	18 f4       	brcc	.+6      	; 0x37c <main+0x48>
 376:	11 30       	cpi	r17, 0x01	; 1
 378:	a9 f0       	breq	.+42     	; 0x3a4 <main+0x70>
 37a:	e8 cf       	rjmp	.-48     	; 0x34c <main+0x18>
 37c:	13 30       	cpi	r17, 0x03	; 3
 37e:	09 f4       	brne	.+2      	; 0x382 <main+0x4e>
 380:	41 c0       	rjmp	.+130    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 382:	14 30       	cpi	r17, 0x04	; 4
 384:	09 f4       	brne	.+2      	; 0x388 <main+0x54>
 386:	56 c0       	rjmp	.+172    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 388:	e1 cf       	rjmp	.-62     	; 0x34c <main+0x18>
			{
				case LED_0:
					
					while(Dio_ReadChannel(Dio_Channel_D0)==1)
					{
						Dio_WriteChannel(Dio_Channel_A0,STD_high);
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	8d ee       	ldi	r24, 0xED	; 237
 396:	92 e0       	ldi	r25, 0x02	; 2
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x64>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x6e>
 3a2:	00 00       	nop
			_delay_ms(20);
			switch(count)
			{
				case LED_0:
					
					while(Dio_ReadChannel(Dio_Channel_D0)==1)
 3a4:	88 e1       	ldi	r24, 0x18	; 24
 3a6:	0e 94 08 01 	call	0x210	; 0x210 <Dio_ReadChannel>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	71 f3       	breq	.-36     	; 0x38a <main+0x56>
					{
						Dio_WriteChannel(Dio_Channel_A0,STD_high);
						_delay_ms(60);
					}
					Dio_WriteChannel(Dio_Channel_A0,STD_low);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
					
				 count++;
 3b6:	12 e0       	ldi	r17, 0x02	; 2
				break;
 3b8:	c9 cf       	rjmp	.-110    	; 0x34c <main+0x18>
				
				case LED_1:
				    while(Dio_ReadChannel(Dio_Channel_D0)==1)
				    {
					    Dio_WriteChannel(Dio_Channel_A1,STD_high);
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	8d ee       	ldi	r24, 0xED	; 237
 3c6:	92 e0       	ldi	r25, 0x02	; 2
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x94>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x9e>
 3d2:	00 00       	nop
					
				 count++;
				break;
				
				case LED_1:
				    while(Dio_ReadChannel(Dio_Channel_D0)==1)
 3d4:	88 e1       	ldi	r24, 0x18	; 24
 3d6:	0e 94 08 01 	call	0x210	; 0x210 <Dio_ReadChannel>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	71 f3       	breq	.-36     	; 0x3ba <main+0x86>
				    {
					    Dio_WriteChannel(Dio_Channel_A1,STD_high);
						_delay_ms(60);
				    }
				    Dio_WriteChannel(Dio_Channel_A1,STD_low);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
				    
				count++;
 3e6:	10 2f       	mov	r17, r16
				break;
 3e8:	b1 cf       	rjmp	.-158    	; 0x34c <main+0x18>
				
				case LED_2:
				while(Dio_ReadChannel(Dio_Channel_D0)==1)
				{
					Dio_WriteChannel(Dio_Channel_A2,STD_high);
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	8d ee       	ldi	r24, 0xED	; 237
 3f6:	92 e0       	ldi	r25, 0x02	; 2
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	90 40       	sbci	r25, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0xc4>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
				    
				count++;
				break;
				
				case LED_2:
				while(Dio_ReadChannel(Dio_Channel_D0)==1)
 404:	88 e1       	ldi	r24, 0x18	; 24
 406:	0e 94 08 01 	call	0x210	; 0x210 <Dio_ReadChannel>
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	71 f3       	breq	.-36     	; 0x3ea <main+0xb6>
				{
					Dio_WriteChannel(Dio_Channel_A2,STD_high);
					_delay_ms(60);
				}
				Dio_WriteChannel(Dio_Channel_A2,STD_low);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
				
				count++;
 416:	1f 2d       	mov	r17, r15
				break;
 418:	99 cf       	rjmp	.-206    	; 0x34c <main+0x18>
				
				case LED_3:
				while(Dio_ReadChannel(Dio_Channel_D0)==1)
				{
					Dio_WriteChannel(Dio_Channel_A3,STD_high);
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	80 2f       	mov	r24, r16
 41e:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 422:	2f ef       	ldi	r18, 0xFF	; 255
 424:	8d ee       	ldi	r24, 0xED	; 237
 426:	92 e0       	ldi	r25, 0x02	; 2
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
				
				count++;
				break;
				
				case LED_3:
				while(Dio_ReadChannel(Dio_Channel_D0)==1)
 434:	88 e1       	ldi	r24, 0x18	; 24
 436:	0e 94 08 01 	call	0x210	; 0x210 <Dio_ReadChannel>
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	71 f3       	breq	.-36     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				{
					Dio_WriteChannel(Dio_Channel_A3,STD_high);
					_delay_ms(60);
				}
				Dio_WriteChannel(Dio_Channel_A3,STD_low);
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	80 2f       	mov	r24, r16
 442:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
				
				count=1;
 446:	11 e0       	ldi	r17, 0x01	; 1
				break;
 448:	81 cf       	rjmp	.-254    	; 0x34c <main+0x18>

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
