
counter_turn_off_without_delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084f  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000581  00000000  00000000  00000b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000388  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000346  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000318  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001ada  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	66 00       	.word	0x0066	; ????
  56:	72 00       	.word	0x0072	; ????
  58:	7e 00       	.word	0x007e	; ????
  5a:	8c 00       	.word	0x008c	; ????
  5c:	9a 00       	.word	0x009a	; ????
  5e:	a8 00       	.word	0x00a8	; ????
  60:	b6 00       	.word	0x00b6	; ????
  62:	c4 00       	.word	0x00c4	; ????
  64:	d2 00       	.word	0x00d2	; ????
  66:	e0 00       	.word	0x00e0	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 36       	cpi	r26, 0x61	; 97
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#define GIT_BIT(var,bit) ((var>>bit)&1)
#define CLEAR_BIT(var,bit) var&=~(1<<bit)
int main(void)
{
	// Make the output direction ready
	DDRC=0xfc; //0b 1111 1100
  90:	8c ef       	ldi	r24, 0xFC	; 252
  92:	84 bb       	out	0x14, r24	; 20

	// The diriction of button
	CLEAR_BIT(DDRD,0);
  94:	88 98       	cbi	0x11, 0	; 17
				break;
				case 9:
				PORTC|=0x9c;
				_delay_ms(1000);
				PORTC=0x00;
				count =-1;
  96:	4f ef       	ldi	r20, 0xFF	; 255
				_delay_ms(1000);
				PORTC=0x00;
				break;
				
				case 1:
				PORTC=0x1c;
  98:	3c e1       	ldi	r19, 0x1C	; 28
		{
			_delay_ms(30);
			switch(count)
			{
				case 0:
				PORTC=0x0c;
  9a:	2c e0       	ldi	r18, 0x0C	; 12
	CLEAR_BIT(DDRD,0);
	/* Replace with your application code */
	while (1)
	{
		static char count=0;
		if(GIT_BIT(PIND,1)==1)
  9c:	81 9b       	sbis	0x10, 1	; 16
  9e:	a4 c0       	rjmp	.+328    	; 0x1e8 <main+0x158>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	5f ef       	ldi	r21, 0xFF	; 255
  a2:	86 e7       	ldi	r24, 0x76	; 118
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	51 50       	subi	r21, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x16>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x20>
  b0:	00 00       	nop
		{
			_delay_ms(30);
			switch(count)
  b2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
  b6:	8e 2f       	mov	r24, r30
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	91 05       	cpc	r25, r1
  be:	08 f0       	brcs	.+2      	; 0xc2 <main+0x32>
  c0:	8e c0       	rjmp	.+284    	; 0x1de <main+0x14e>
  c2:	fc 01       	movw	r30, r24
  c4:	e6 5d       	subi	r30, 0xD6	; 214
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__tablejump2__>
			{
				case 0:
				PORTC=0x0c;
  cc:	25 bb       	out	0x15, r18	; 21
  ce:	5f ef       	ldi	r21, 0xFF	; 255
  d0:	83 ed       	ldi	r24, 0xD3	; 211
  d2:	90 e3       	ldi	r25, 0x30	; 48
  d4:	51 50       	subi	r21, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x44>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x4e>
  de:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
  e0:	15 ba       	out	0x15, r1	; 21
				break;
  e2:	7d c0       	rjmp	.+250    	; 0x1de <main+0x14e>
				
				case 1:
				PORTC=0x1c;
  e4:	35 bb       	out	0x15, r19	; 21
  e6:	5f ef       	ldi	r21, 0xFF	; 255
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	51 50       	subi	r21, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x5c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x66>
  f6:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
  f8:	15 ba       	out	0x15, r1	; 21
				break;
  fa:	71 c0       	rjmp	.+226    	; 0x1de <main+0x14e>
				case 2:
				PORTC|=0x2c;
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8c 62       	ori	r24, 0x2C	; 44
 100:	85 bb       	out	0x15, r24	; 21
 102:	5f ef       	ldi	r21, 0xFF	; 255
 104:	83 ed       	ldi	r24, 0xD3	; 211
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	51 50       	subi	r21, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x78>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x82>
 112:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
 114:	15 ba       	out	0x15, r1	; 21
				break;
 116:	63 c0       	rjmp	.+198    	; 0x1de <main+0x14e>
				case 3:
				PORTC|=0x3c;
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	8c 63       	ori	r24, 0x3C	; 60
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	5f ef       	ldi	r21, 0xFF	; 255
 120:	83 ed       	ldi	r24, 0xD3	; 211
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	51 50       	subi	r21, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x94>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x9e>
 12e:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
 130:	15 ba       	out	0x15, r1	; 21
				break;
 132:	55 c0       	rjmp	.+170    	; 0x1de <main+0x14e>
				case 4:
				PORTC|=0x4c;
 134:	85 b3       	in	r24, 0x15	; 21
 136:	8c 64       	ori	r24, 0x4C	; 76
 138:	85 bb       	out	0x15, r24	; 21
 13a:	5f ef       	ldi	r21, 0xFF	; 255
 13c:	83 ed       	ldi	r24, 0xD3	; 211
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	51 50       	subi	r21, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xb0>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xba>
 14a:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
 14c:	15 ba       	out	0x15, r1	; 21
				break;
 14e:	47 c0       	rjmp	.+142    	; 0x1de <main+0x14e>
				case 5:
				PORTC|=0x5c;
 150:	85 b3       	in	r24, 0x15	; 21
 152:	8c 65       	ori	r24, 0x5C	; 92
 154:	85 bb       	out	0x15, r24	; 21
 156:	5f ef       	ldi	r21, 0xFF	; 255
 158:	83 ed       	ldi	r24, 0xD3	; 211
 15a:	90 e3       	ldi	r25, 0x30	; 48
 15c:	51 50       	subi	r21, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xcc>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xd6>
 166:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
 168:	15 ba       	out	0x15, r1	; 21
				break;
 16a:	39 c0       	rjmp	.+114    	; 0x1de <main+0x14e>
				case 6:
				PORTC|=0x6c;
 16c:	85 b3       	in	r24, 0x15	; 21
 16e:	8c 66       	ori	r24, 0x6C	; 108
 170:	85 bb       	out	0x15, r24	; 21
 172:	5f ef       	ldi	r21, 0xFF	; 255
 174:	83 ed       	ldi	r24, 0xD3	; 211
 176:	90 e3       	ldi	r25, 0x30	; 48
 178:	51 50       	subi	r21, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xe8>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xf2>
 182:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
 184:	15 ba       	out	0x15, r1	; 21
				break;
 186:	2b c0       	rjmp	.+86     	; 0x1de <main+0x14e>
				case 7:
				PORTC|=0x7c;
 188:	85 b3       	in	r24, 0x15	; 21
 18a:	8c 67       	ori	r24, 0x7C	; 124
 18c:	85 bb       	out	0x15, r24	; 21
 18e:	5f ef       	ldi	r21, 0xFF	; 255
 190:	83 ed       	ldi	r24, 0xD3	; 211
 192:	90 e3       	ldi	r25, 0x30	; 48
 194:	51 50       	subi	r21, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x104>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x10e>
 19e:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
 1a0:	15 ba       	out	0x15, r1	; 21
				break;
 1a2:	1d c0       	rjmp	.+58     	; 0x1de <main+0x14e>
				case 8:
				PORTC|=0x8c;
 1a4:	85 b3       	in	r24, 0x15	; 21
 1a6:	8c 68       	ori	r24, 0x8C	; 140
 1a8:	85 bb       	out	0x15, r24	; 21
 1aa:	5f ef       	ldi	r21, 0xFF	; 255
 1ac:	83 ed       	ldi	r24, 0xD3	; 211
 1ae:	90 e3       	ldi	r25, 0x30	; 48
 1b0:	51 50       	subi	r21, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x120>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x12a>
 1ba:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
 1bc:	15 ba       	out	0x15, r1	; 21
				break;
 1be:	0f c0       	rjmp	.+30     	; 0x1de <main+0x14e>
				case 9:
				PORTC|=0x9c;
 1c0:	85 b3       	in	r24, 0x15	; 21
 1c2:	8c 69       	ori	r24, 0x9C	; 156
 1c4:	85 bb       	out	0x15, r24	; 21
 1c6:	5f ef       	ldi	r21, 0xFF	; 255
 1c8:	83 ed       	ldi	r24, 0xD3	; 211
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	51 50       	subi	r21, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x13c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x146>
 1d6:	00 00       	nop
				_delay_ms(1000);
				PORTC=0x00;
 1d8:	15 ba       	out	0x15, r1	; 21
				count =-1;
 1da:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>
				break;
				
			}
			count++;
 1de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			

		}
		while((PIND&0x01)==0x00)// lma b700t da w 24el el delay 
 1e8:	80 9b       	sbis	0x10, 0	; 16
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <main+0x158>
 1ec:	57 cf       	rjmp	.-338    	; 0x9c <main+0xc>

000001ee <__tablejump2__>:
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	05 90       	lpm	r0, Z+
 1f4:	f4 91       	lpm	r31, Z
 1f6:	e0 2d       	mov	r30, r0
 1f8:	09 94       	ijmp

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
