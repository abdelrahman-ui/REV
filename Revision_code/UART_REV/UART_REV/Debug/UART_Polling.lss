
UART_Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c4  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000646  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033f  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000202  00000000  00000000  000017c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8a:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Uart_Init>:
}

 void Uart_Init ()
 {
	// Initialize Boud Rate 
	UBRRL=BAUD_EQ;
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	89 b9       	out	0x09, r24	; 9
	// Transimate & Resive & Enable interrupt of reciver complete
	UCSRB |=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN); 
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	88 69       	ori	r24, 0x98	; 152
  9a:	8a b9       	out	0x0a, r24	; 10
	//Number Of Stop bits & size from [5.....9] & No parity & Asynchronous
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  9c:	80 b5       	in	r24, 0x20	; 32
  9e:	86 68       	ori	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <Uart_Send_Char>:
 
 
 void Uart_Send_Char( unsigned char data)
 {
	 //Send data
	 while(!(UCSRA&(1<<UDRE)));//polling
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <Uart_Send_Char>
	 UDR=data;
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <Uart_Receive>:
 }
 
 
  char Uart_Receive()
  {
	  while(!(UCSRA&(1<<RXC)));   //make sure i have data now 
  ac:	5f 9b       	sbis	0x0b, 7	; 11
  ae:	fe cf       	rjmp	.-4      	; 0xac <Uart_Receive>
	  return UDR;
  b0:	8c b1       	in	r24, 0x0c	; 12

  }
  b2:	08 95       	ret

000000b4 <Uart_Send_String>:
  
  void Uart_Send_String( char *Str)
  {
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
	  unsigned short i=0;
	  while(Str[i]!='\0'){
  ba:	88 81       	ld	r24, Y
  bc:	88 23       	and	r24, r24
  be:	31 f0       	breq	.+12     	; 0xcc <Uart_Send_String+0x18>
  c0:	21 96       	adiw	r28, 0x01	; 1
		  Uart_Send_Char(Str[i]);
  c2:	0e 94 52 00 	call	0xa4	; 0xa4 <Uart_Send_Char>
  }
  
  void Uart_Send_String( char *Str)
  {
	  unsigned short i=0;
	  while(Str[i]!='\0'){
  c6:	89 91       	ld	r24, Y+
  c8:	81 11       	cpse	r24, r1
  ca:	fb cf       	rjmp	.-10     	; 0xc2 <Uart_Send_String+0xe>
		  Uart_Send_Char(Str[i]);
		  i++;
	  }
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <main>:
 
 volatile char recv_buf,recv_flag,recv_byte;
 
int main(void)
{
	DDRC|=(1<<PC2)|(1<<PC3)|(1<<PC1)|(1<<PC0);
  d2:	84 b3       	in	r24, 0x14	; 20
  d4:	8f 60       	ori	r24, 0x0F	; 15
  d6:	84 bb       	out	0x14, r24	; 20
    Uart_Init ();
  d8:	0e 94 49 00 	call	0x92	; 0x92 <Uart_Init>
	Uart_Send_String("ABDO \r \n");
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 5a 00 	call	0xb4	; 0xb4 <Uart_Send_String>
	char data ;
    while (1) 
    {
		data =Uart_Receive();
  e4:	0e 94 56 00 	call	0xac	; 0xac <Uart_Receive>
		switch(data)
  e8:	82 33       	cpi	r24, 0x32	; 50
  ea:	a9 f0       	breq	.+42     	; 0x116 <main+0x44>
  ec:	18 f4       	brcc	.+6      	; 0xf4 <main+0x22>
  ee:	81 33       	cpi	r24, 0x31	; 49
  f0:	31 f0       	breq	.+12     	; 0xfe <main+0x2c>
  f2:	f8 cf       	rjmp	.-16     	; 0xe4 <main+0x12>
  f4:	83 33       	cpi	r24, 0x33	; 51
  f6:	d9 f0       	breq	.+54     	; 0x12e <main+0x5c>
  f8:	84 33       	cpi	r24, 0x34	; 52
  fa:	29 f1       	breq	.+74     	; 0x146 <main+0x74>
  fc:	f3 cf       	rjmp	.-26     	; 0xe4 <main+0x12>
		{
			case '1' :
			PORTC|=(1<<PC0);
  fe:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 e6       	ldi	r24, 0x69	; 105
 104:	98 e1       	ldi	r25, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x34>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x3e>
 110:	00 00       	nop
			_delay_ms(500);
			PORTC&=~(1<<PC0);
 112:	a8 98       	cbi	0x15, 0	; 21
			break;
 114:	e7 cf       	rjmp	.-50     	; 0xe4 <main+0x12>
			case '2' :
			PORTC|=(1<<PC1);
 116:	a9 9a       	sbi	0x15, 1	; 21
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	89 e6       	ldi	r24, 0x69	; 105
 11c:	98 e1       	ldi	r25, 0x18	; 24
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x4c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x56>
 128:	00 00       	nop
			_delay_ms(500);
			PORTC&=~(1<<PC2);
 12a:	aa 98       	cbi	0x15, 2	; 21
			break;
 12c:	db cf       	rjmp	.-74     	; 0xe4 <main+0x12>
			case '3' :
			PORTC|=(1<<PC2);
 12e:	aa 9a       	sbi	0x15, 2	; 21
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x64>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x6e>
 140:	00 00       	nop
			_delay_ms(500);
			PORTC&=~(1<<PC2);
 142:	aa 98       	cbi	0x15, 2	; 21
			break;
 144:	cf cf       	rjmp	.-98     	; 0xe4 <main+0x12>
			case '4' :
			PORTC|=(1<<PC3);
 146:	ab 9a       	sbi	0x15, 3	; 21
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	89 e6       	ldi	r24, 0x69	; 105
 14c:	98 e1       	ldi	r25, 0x18	; 24
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x7c>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x86>
 158:	00 00       	nop
			_delay_ms(500);
			PORTC&=~(1<<PC3);
 15a:	ab 98       	cbi	0x15, 3	; 21
			break;
 15c:	c3 cf       	rjmp	.-122    	; 0xe4 <main+0x12>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
