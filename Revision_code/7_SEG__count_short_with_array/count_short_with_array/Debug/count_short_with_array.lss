
count_short_with_array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000da  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  00000178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000063e  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000593  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024c  00000000  00000000  00000dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033f  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001387  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000013cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
unsigned char Lut []={0x0c,0x1c,0x2c,0x3c,0x4c,0x5c,0x6c,0x7c,0x8c,0x9c};

int main(void)
{
	// Make the output direction ready
	DDRC=0xfc; //0b 1111 1100
  92:	8c ef       	ldi	r24, 0xFC	; 252
  94:	84 bb       	out	0x14, r24	; 20

	// The diriction of button
	CLEAR_BIT(DDRD,0);
  96:	88 98       	cbi	0x11, 0	; 17
	/* Replace with your application code */
	while (1)
	{
		static char count=0;
		
		if(GIT_BIT(PIND,1)==1)
  98:	81 9b       	sbis	0x10, 1	; 16
  9a:	16 c0       	rjmp	.+44     	; 0xc8 <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	86 e7       	ldi	r24, 0x76	; 118
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x1a>
  ac:	00 00       	nop
		{
			_delay_ms(30);
			PORTC=Lut[count];
  ae:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	e0 5a       	subi	r30, 0xA0	; 160
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	80 81       	ld	r24, Z
  ba:	85 bb       	out	0x15, r24	; 21
			
			count++;
  bc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  c6:	e8 cf       	rjmp	.-48     	; 0x98 <main+0x6>
			
		}
		else if (count==10)
  c8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  cc:	8a 30       	cpi	r24, 0x0A	; 10
  ce:	21 f7       	brne	.-56     	; 0x98 <main+0x6>
		{
			count=0;
  d0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
  d4:	e1 cf       	rjmp	.-62     	; 0x98 <main+0x6>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
