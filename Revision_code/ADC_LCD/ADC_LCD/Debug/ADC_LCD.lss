
ADC_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000308  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000308  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea8  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084b  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000696  00000000  00000000  00001b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00002218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000730  00000000  00000000  00002709  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002e39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 08 01 	call	0x210	; 0x210 <main>
  7a:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
	data = data - 55 ;
	*/
	itoa(data,string,10);
	LCD_String(string);
	return data;
}
  82:	d1 98       	cbi	0x1a, 1	; 26
  84:	8a b3       	in	r24, 0x1a	; 26
  86:	8a bb       	out	0x1a, r24	; 26
  88:	80 ec       	ldi	r24, 0xC0	; 192
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	83 ea       	ldi	r24, 0xA3	; 163
  8e:	86 b9       	out	0x06, r24	; 6
  90:	08 95       	ret

00000092 <ADC_Read>:
unsigned int ADC_Read(unsigned channel){
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	c4 56       	subi	r28, 0x64	; 100
  a0:	d1 09       	sbc	r29, r1
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	short data =0;
	char string[100];
	ADMUX |=(channel&0x1f);
  ac:	97 b1       	in	r25, 0x07	; 7
  ae:	8f 71       	andi	r24, 0x1F	; 31
  b0:	98 2b       	or	r25, r24
  b2:	97 b9       	out	0x07, r25	; 7
	//start conversion
	ADCSRA|=(1<<ADSC);
  b4:	36 9a       	sbi	0x06, 6	; 6
	
	//check flag -
	while(!(ADCSRA&(1<<ADIF))); //infinite loop --POLLING 100%
  b6:	34 9b       	sbis	0x06, 4	; 6
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <ADC_Read+0x24>
	//clear flag
	ADCSRA|=(1<<ADIF);
  ba:	34 9a       	sbi	0x06, 4	; 6
	//ADCL
	data = ADCL;
  bc:	04 b1       	in	r16, 0x04	; 4
	//ADCH
	data|=ADCH<<8;
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	18 2b       	or	r17, r24
	/*//temp equation
	data = data / 4 ;
	data = data - 55 ;
	*/
	itoa(data,string,10);
  c4:	4a e0       	ldi	r20, 0x0A	; 10
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	be 01       	movw	r22, r28
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	c8 01       	movw	r24, r16
  d0:	0e 94 42 01 	call	0x284	; 0x284 <itoa>
	LCD_String(string);
  d4:	ce 01       	movw	r24, r28
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_String>
	return data;
  dc:	c8 01       	movw	r24, r16
  de:	cc 59       	subi	r28, 0x9C	; 156
  e0:	df 4f       	sbci	r29, 0xFF	; 255
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
  f6:	9b b3       	in	r25, 0x1b	; 27
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	28 2f       	mov	r18, r24
  fc:	20 7f       	andi	r18, 0xF0	; 240
  fe:	92 2b       	or	r25, r18
 100:	9b bb       	out	0x1b, r25	; 27
 102:	c1 98       	cbi	0x18, 1	; 24
 104:	c3 9a       	sbi	0x18, 3	; 24
 106:	35 e3       	ldi	r19, 0x35	; 53
 108:	3a 95       	dec	r19
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Command+0x12>
 10c:	00 00       	nop
 10e:	c3 98       	cbi	0x18, 3	; 24
 110:	ef e1       	ldi	r30, 0x1F	; 31
 112:	f3 e0       	ldi	r31, 0x03	; 3
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_Command+0x1e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_Command+0x24>
 11a:	00 00       	nop
 11c:	2b b3       	in	r18, 0x1b	; 27
 11e:	2f 70       	andi	r18, 0x0F	; 15
 120:	f0 e1       	ldi	r31, 0x10	; 16
 122:	8f 9f       	mul	r24, r31
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	82 2b       	or	r24, r18
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	c3 9a       	sbi	0x18, 3	; 24
 12e:	35 e0       	ldi	r19, 0x05	; 5
 130:	3a 95       	dec	r19
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_Command+0x3a>
 134:	00 00       	nop
 136:	c3 98       	cbi	0x18, 3	; 24
 138:	8f e3       	ldi	r24, 0x3F	; 63
 13a:	9f e1       	ldi	r25, 0x1F	; 31
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Command+0x46>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Command+0x4c>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <LCD_Init>:
 146:	80 ef       	ldi	r24, 0xF0	; 240
 148:	8a bb       	out	0x1a, r24	; 26
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	87 bb       	out	0x17, r24	; 23
 14e:	c2 98       	cbi	0x18, 2	; 24
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <LCD_Init+0x10>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0x1a>
 160:	00 00       	nop
 162:	83 e3       	ldi	r24, 0x33	; 51
 164:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Command>
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Command>
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Command>
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Command>
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Command>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Command>
 186:	08 95       	ret

00000188 <LCD_Char>:
 188:	9b b3       	in	r25, 0x1b	; 27
 18a:	9f 70       	andi	r25, 0x0F	; 15
 18c:	28 2f       	mov	r18, r24
 18e:	20 7f       	andi	r18, 0xF0	; 240
 190:	92 2b       	or	r25, r18
 192:	9b bb       	out	0x1b, r25	; 27
 194:	c1 9a       	sbi	0x18, 1	; 24
 196:	c3 9a       	sbi	0x18, 3	; 24
 198:	35 e3       	ldi	r19, 0x35	; 53
 19a:	3a 95       	dec	r19
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_Char+0x12>
 19e:	00 00       	nop
 1a0:	c3 98       	cbi	0x18, 3	; 24
 1a2:	ef e1       	ldi	r30, 0x1F	; 31
 1a4:	f3 e0       	ldi	r31, 0x03	; 3
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Char+0x1e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Char+0x24>
 1ac:	00 00       	nop
 1ae:	2b b3       	in	r18, 0x1b	; 27
 1b0:	2f 70       	andi	r18, 0x0F	; 15
 1b2:	f0 e1       	ldi	r31, 0x10	; 16
 1b4:	8f 9f       	mul	r24, r31
 1b6:	c0 01       	movw	r24, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	82 2b       	or	r24, r18
 1bc:	8b bb       	out	0x1b, r24	; 27
 1be:	c3 9a       	sbi	0x18, 3	; 24
 1c0:	3a e0       	ldi	r19, 0x0A	; 10
 1c2:	3a 95       	dec	r19
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_Char+0x3a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_Char+0x40>
 1c8:	c3 98       	cbi	0x18, 3	; 24
 1ca:	8f e3       	ldi	r24, 0x3F	; 63
 1cc:	9f e1       	ldi	r25, 0x1F	; 31
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_Char+0x46>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_Char+0x4c>
 1d4:	00 00       	nop
 1d6:	08 95       	ret

000001d8 <LCD_String>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
 1de:	88 81       	ld	r24, Y
 1e0:	88 23       	and	r24, r24
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <LCD_String+0x18>
 1e4:	21 96       	adiw	r28, 0x01	; 1
 1e6:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_Char>
 1ea:	89 91       	ld	r24, Y+
 1ec:	81 11       	cpse	r24, r1
 1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <LCD_String+0xe>
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <LCD_Clear>:
/*

*/
void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	8f e3       	ldi	r24, 0x3F	; 63
 1fe:	9f e1       	ldi	r25, 0x1F	; 31
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCD_Clear+0xa>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_Clear+0x10>
 206:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 208:	80 e8       	ldi	r24, 0x80	; 128
 20a:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Command>
 20e:	08 95       	ret

00000210 <main>:
#define  Led_2 7
#include "bit_math.h"
#include <avr/io.h>		
int main(void)
{
    LCD_Init();
 210:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_Init>
	ADC_Init();
 214:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	DDRD|=(1<<Led_1)|(1<<Led_2)|(1<<Led_0);
 218:	81 b3       	in	r24, 0x11	; 17
 21a:	80 6e       	ori	r24, 0xE0	; 224
 21c:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		
		LCD_Clear();
 21e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_Clear>
		LCD_Command(0x80);
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Command>
		LCD_String("Sensor 1 = ");
 22a:	80 e6       	ldi	r24, 0x60	; 96
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_String>
		unsigned char data =ADC_Read(1);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Read>
 23a:	2f e7       	ldi	r18, 0x7F	; 127
 23c:	3a e1       	ldi	r19, 0x1A	; 26
 23e:	96 e0       	ldi	r25, 0x06	; 6
 240:	21 50       	subi	r18, 0x01	; 1
 242:	30 40       	sbci	r19, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x30>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x3a>
 24a:	00 00       	nop
		_delay_ms(2000);
		/*LCD_Command(0xc0);
		LCD_String("Sensor 2 = ");
		ADC_Read_2(0);*/
		if(data<=10)
 24c:	8b 30       	cpi	r24, 0x0B	; 11
 24e:	60 f4       	brcc	.+24     	; 0x268 <main+0x58>
		{
			
			SET_BIT(PORTD,Led_0);
 250:	95 9a       	sbi	0x12, 5	; 18
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	38 e0       	ldi	r19, 0x08	; 8
 256:	8d e3       	ldi	r24, 0x3D	; 61
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	30 40       	sbci	r19, 0x00	; 0
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x48>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x52>
 262:	00 00       	nop
			_delay_ms(20000);
			CLR_BIT(PORTD,Led_0);
 264:	95 98       	cbi	0x12, 5	; 18
 266:	db cf       	rjmp	.-74     	; 0x21e <main+0xe>
			
		}
		else if((data>=10)&&(data<=499))
 268:	8a 30       	cpi	r24, 0x0A	; 10
 26a:	c8 f2       	brcs	.-78     	; 0x21e <main+0xe>
		{
			
			SET_BIT(PORTD,Led_1);
 26c:	96 9a       	sbi	0x12, 6	; 18
 26e:	9f ef       	ldi	r25, 0xFF	; 255
 270:	28 e0       	ldi	r18, 0x08	; 8
 272:	3d e3       	ldi	r19, 0x3D	; 61
 274:	91 50       	subi	r25, 0x01	; 1
 276:	20 40       	sbci	r18, 0x00	; 0
 278:	30 40       	sbci	r19, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x64>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x6e>
 27e:	00 00       	nop
			_delay_ms(20000);
			CLR_BIT(PORTD,Led_1);
 280:	96 98       	cbi	0x12, 6	; 18
 282:	cd cf       	rjmp	.-102    	; 0x21e <main+0xe>

00000284 <itoa>:
 284:	45 32       	cpi	r20, 0x25	; 37
 286:	51 05       	cpc	r21, r1
 288:	20 f4       	brcc	.+8      	; 0x292 <itoa+0xe>
 28a:	42 30       	cpi	r20, 0x02	; 2
 28c:	10 f0       	brcs	.+4      	; 0x292 <itoa+0xe>
 28e:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__itoa_ncheck>
 292:	fb 01       	movw	r30, r22
 294:	10 82       	st	Z, r1
 296:	cb 01       	movw	r24, r22
 298:	08 95       	ret

0000029a <__itoa_ncheck>:
 29a:	bb 27       	eor	r27, r27
 29c:	4a 30       	cpi	r20, 0x0A	; 10
 29e:	31 f4       	brne	.+12     	; 0x2ac <__itoa_ncheck+0x12>
 2a0:	99 23       	and	r25, r25
 2a2:	22 f4       	brpl	.+8      	; 0x2ac <__itoa_ncheck+0x12>
 2a4:	bd e2       	ldi	r27, 0x2D	; 45
 2a6:	90 95       	com	r25
 2a8:	81 95       	neg	r24
 2aa:	9f 4f       	sbci	r25, 0xFF	; 255
 2ac:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__utoa_common>

000002b0 <__utoa_ncheck>:
 2b0:	bb 27       	eor	r27, r27

000002b2 <__utoa_common>:
 2b2:	fb 01       	movw	r30, r22
 2b4:	55 27       	eor	r21, r21
 2b6:	aa 27       	eor	r26, r26
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	aa 1f       	adc	r26, r26
 2be:	a4 17       	cp	r26, r20
 2c0:	10 f0       	brcs	.+4      	; 0x2c6 <__utoa_common+0x14>
 2c2:	a4 1b       	sub	r26, r20
 2c4:	83 95       	inc	r24
 2c6:	50 51       	subi	r21, 0x10	; 16
 2c8:	b9 f7       	brne	.-18     	; 0x2b8 <__utoa_common+0x6>
 2ca:	a0 5d       	subi	r26, 0xD0	; 208
 2cc:	aa 33       	cpi	r26, 0x3A	; 58
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <__utoa_common+0x20>
 2d0:	a9 5d       	subi	r26, 0xD9	; 217
 2d2:	a1 93       	st	Z+, r26
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	79 f7       	brne	.-34     	; 0x2b6 <__utoa_common+0x4>
 2d8:	b1 11       	cpse	r27, r1
 2da:	b1 93       	st	Z+, r27
 2dc:	11 92       	st	Z+, r1
 2de:	cb 01       	movw	r24, r22
 2e0:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <strrev>

000002e4 <strrev>:
 2e4:	dc 01       	movw	r26, r24
 2e6:	fc 01       	movw	r30, r24
 2e8:	67 2f       	mov	r22, r23
 2ea:	71 91       	ld	r23, Z+
 2ec:	77 23       	and	r23, r23
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <strrev+0x4>
 2f0:	32 97       	sbiw	r30, 0x02	; 2
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <strrev+0x18>
 2f4:	7c 91       	ld	r23, X
 2f6:	6d 93       	st	X+, r22
 2f8:	70 83       	st	Z, r23
 2fa:	62 91       	ld	r22, -Z
 2fc:	ae 17       	cp	r26, r30
 2fe:	bf 07       	cpc	r27, r31
 300:	c8 f3       	brcs	.-14     	; 0x2f4 <strrev+0x10>
 302:	08 95       	ret

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
