
Servo_Timer_1_Control_TOP_OCR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007eb  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c1  00000000  00000000  000009fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002df  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036b  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f6  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001831  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

void Servo_Motor(unsigned short Angle  );

int main(void)
{	// Take The Mode  Fast _PWM__Action_non_inverting 
   TCCR1A|=(1<<WGM11)|(1<<COM1A1);
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	82 68       	ori	r24, 0x82	; 130
  70:	8f bd       	out	0x2f, r24	; 47
   TCCR1B|=(1<<WGM12)|(1<<WGM13);
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	88 61       	ori	r24, 0x18	; 24
  76:	8e bd       	out	0x2e, r24	; 46
    //Dir of  OC1A & OC1B
   DDRD|=(1<<PD4)|(1<<PD5);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 63       	ori	r24, 0x30	; 48
  7c:	81 bb       	out	0x11, r24	; 17
    //Prescaler 64
	TCCR1B|=(1<<CS11)|(1<<CS10);
  7e:	8e b5       	in	r24, 0x2e	; 46
  80:	83 60       	ori	r24, 0x03	; 3
  82:	8e bd       	out	0x2e, r24	; 46
	//Make TOP =5000 
	ICR1 = 4999;
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	93 e1       	ldi	r25, 0x13	; 19
  88:	97 bd       	out	0x27, r25	; 39
  8a:	86 bd       	out	0x26, r24	; 38
}

// Control Duty Cycle To Control Angle Of The Servo 
void Servo_Motor(unsigned short Angle  )
{
	 OCR1A = ((( Angle - Mini_Angle )*(MAX_Count -Mini_Count))/(MAX_Angle - Mini_Angle))+250-1;
  8c:	e9 ef       	ldi	r30, 0xF9	; 249
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	67 e3       	ldi	r22, 0x37	; 55
  92:	71 e0       	ldi	r23, 0x01	; 1
  94:	46 e7       	ldi	r20, 0x76	; 118
  96:	51 e0       	ldi	r21, 0x01	; 1
  98:	26 ea       	ldi	r18, 0xA6	; 166
  9a:	31 e0       	ldi	r19, 0x01	; 1
  9c:	85 ee       	ldi	r24, 0xE5	; 229
  9e:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	af ef       	ldi	r26, 0xFF	; 255
  a2:	b7 ea       	ldi	r27, 0xA7	; 167
  a4:	c1 e6       	ldi	r28, 0x61	; 97
  a6:	a1 50       	subi	r26, 0x01	; 1
  a8:	b0 40       	sbci	r27, 0x00	; 0
  aa:	c0 40       	sbci	r28, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
  b2:	fb bd       	out	0x2b, r31	; 43
  b4:	ea bd       	out	0x2a, r30	; 42
  b6:	af ef       	ldi	r26, 0xFF	; 255
  b8:	b7 ea       	ldi	r27, 0xA7	; 167
  ba:	c1 e6       	ldi	r28, 0x61	; 97
  bc:	a1 50       	subi	r26, 0x01	; 1
  be:	b0 40       	sbci	r27, 0x00	; 0
  c0:	c0 40       	sbci	r28, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x50>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x5a>
  c6:	00 00       	nop
  c8:	7b bd       	out	0x2b, r23	; 43
  ca:	6a bd       	out	0x2a, r22	; 42
  cc:	af ef       	ldi	r26, 0xFF	; 255
  ce:	b7 ea       	ldi	r27, 0xA7	; 167
  d0:	c1 e6       	ldi	r28, 0x61	; 97
  d2:	a1 50       	subi	r26, 0x01	; 1
  d4:	b0 40       	sbci	r27, 0x00	; 0
  d6:	c0 40       	sbci	r28, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x66>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x70>
  dc:	00 00       	nop
  de:	5b bd       	out	0x2b, r21	; 43
  e0:	4a bd       	out	0x2a, r20	; 42
  e2:	af ef       	ldi	r26, 0xFF	; 255
  e4:	b7 ea       	ldi	r27, 0xA7	; 167
  e6:	c1 e6       	ldi	r28, 0x61	; 97
  e8:	a1 50       	subi	r26, 0x01	; 1
  ea:	b0 40       	sbci	r27, 0x00	; 0
  ec:	c0 40       	sbci	r28, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x7c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x86>
  f2:	00 00       	nop
  f4:	3b bd       	out	0x2b, r19	; 43
  f6:	2a bd       	out	0x2a, r18	; 42
  f8:	af ef       	ldi	r26, 0xFF	; 255
  fa:	b7 ea       	ldi	r27, 0xA7	; 167
  fc:	c1 e6       	ldi	r28, 0x61	; 97
  fe:	a1 50       	subi	r26, 0x01	; 1
 100:	b0 40       	sbci	r27, 0x00	; 0
 102:	c0 40       	sbci	r28, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x92>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x9c>
 108:	00 00       	nop
 10a:	9b bd       	out	0x2b, r25	; 43
 10c:	8a bd       	out	0x2a, r24	; 42
 10e:	af ef       	ldi	r26, 0xFF	; 255
 110:	b7 ea       	ldi	r27, 0xA7	; 167
 112:	c1 e6       	ldi	r28, 0x61	; 97
 114:	a1 50       	subi	r26, 0x01	; 1
 116:	b0 40       	sbci	r27, 0x00	; 0
 118:	c0 40       	sbci	r28, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0xa8>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0xb2>
 11e:	00 00       	nop
 120:	bf cf       	rjmp	.-130    	; 0xa0 <main+0x34>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
