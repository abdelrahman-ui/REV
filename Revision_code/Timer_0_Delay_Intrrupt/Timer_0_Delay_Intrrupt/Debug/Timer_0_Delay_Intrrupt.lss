
Timer_0_Delay_Intrrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000017a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005bf  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000529  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000232  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000308  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
volatile unsigned char count_1 =0 ;
volatile unsigned char count_2 =0 ;

int main(void)
{	//Prescaler 16000000/64 
	TCCR0|=(1<<CS00)|(1<<CS01);
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	83 60       	ori	r24, 0x03	; 3
  80:	83 bf       	out	0x33, r24	; 51
	//Turn On interrupt OVER FLOW
	TIMSK|=(1<<TOV0);
  82:	89 b7       	in	r24, 0x39	; 57
  84:	81 60       	ori	r24, 0x01	; 1
  86:	89 bf       	out	0x39, r24	; 57
	//Global 
	sei();
  88:	78 94       	sei
	DDRD|=(1<<PD5)|(1<<PD6)|(1<<PD7);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 6e       	ori	r24, 0xE0	; 224
  8e:	81 bb       	out	0x11, r24	; 17
			
			count_0 =0;
		}
		if (count_1==100)
		{
			PORTD^=(1<<PD5);
  90:	90 e2       	ldi	r25, 0x20	; 32
			
			count_1 =0;
		}
		if (count_2==250)
		{
			PORTD^=(1<<PD6);
  92:	20 e4       	ldi	r18, 0x40	; 64
	//Global 
	sei();
	DDRD|=(1<<PD5)|(1<<PD6)|(1<<PD7);
    while (1) 
    {
		if (count_0==200)
  94:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_0>
  98:	88 3c       	cpi	r24, 0xC8	; 200
  9a:	29 f4       	brne	.+10     	; 0xa6 <main+0x2a>
		{
			PORTD^=(1<<PD7);
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	80 58       	subi	r24, 0x80	; 128
  a0:	82 bb       	out	0x12, r24	; 18
			
			count_0 =0;
  a2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <count_0>
		}
		if (count_1==100)
  a6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_1>
  aa:	84 36       	cpi	r24, 0x64	; 100
  ac:	29 f4       	brne	.+10     	; 0xb8 <main+0x3c>
		{
			PORTD^=(1<<PD5);
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	89 27       	eor	r24, r25
  b2:	82 bb       	out	0x12, r24	; 18
			
			count_1 =0;
  b4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <count_1>
		}
		if (count_2==250)
  b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  bc:	8a 3f       	cpi	r24, 0xFA	; 250
  be:	51 f7       	brne	.-44     	; 0x94 <main+0x18>
		{
			PORTD^=(1<<PD6);
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	82 27       	eor	r24, r18
  c4:	82 bb       	out	0x12, r24	; 18
			
			count_2 =0;
  c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  ca:	e4 cf       	rjmp	.-56     	; 0x94 <main+0x18>

000000cc <__vector_11>:
		}
    }
}

ISR(TIMER0_OVF_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
	count_0 ++;
  d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <count_0>
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <count_0>
	count_1 ++;
  e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count_1>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count_1>
	count_2 ++;
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
